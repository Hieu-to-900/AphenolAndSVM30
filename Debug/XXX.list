
XXX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004f88  08004f88  00014f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005070  08005070  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005070  08005070  00015070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005078  08005078  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800507c  0800507c  0001507c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000074  080050f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080050f4  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f889  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026b5  00000000  00000000  0002f92d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c48  00000000  00000000  00031fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b30  00000000  00000000  00032c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000180d1  00000000  00000000  00033760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba49  00000000  00000000  0004b831  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089d6f  00000000  00000000  0005727a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0fe9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036c0  00000000  00000000  000e1064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004f70 	.word	0x08004f70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08004f70 	.word	0x08004f70

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f001 f92c 	bl	8001738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f856 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f934 	bl	8000750 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 f912 	bl	8000710 <MX_DMA_Init>
  MX_I2C2_Init();
 80004ec:	f000 f8b8 	bl	8000660 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 80004f0:	f000 f8e4 	bl	80006bc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  i2c_init_sensirion(&hi2c2);
 80004f4:	481e      	ldr	r0, [pc, #120]	; (8000570 <main+0x98>)
 80004f6:	f000 fb25 	bl	8000b44 <i2c_init_sensirion>
  SM_UART_04L_Init(&huart6);
 80004fa:	481e      	ldr	r0, [pc, #120]	; (8000574 <main+0x9c>)
 80004fc:	f000 fd9a 	bl	8001034 <SM_UART_04L_Init>

  while (svm_probe() != STATUS_OK) {
 8000500:	e002      	b.n	8000508 <main+0x30>
  		   printf("SVM30 module probing failed\n");
 8000502:	481d      	ldr	r0, [pc, #116]	; (8000578 <main+0xa0>)
 8000504:	f004 f928 	bl	8004758 <puts>
  while (svm_probe() != STATUS_OK) {
 8000508:	f001 f828 	bl	800155c <svm_probe>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d1f7      	bne.n	8000502 <main+0x2a>
  	  }
  	   printf("SVM30 module probing successful\n");
 8000512:	481a      	ldr	r0, [pc, #104]	; (800057c <main+0xa4>)
 8000514:	f004 f920 	bl	8004758 <puts>
    err = sgp30_iaq_init();
 8000518:	f000 fc9c 	bl	8000e54 <sgp30_iaq_init>
 800051c:	4603      	mov	r3, r0
 800051e:	461a      	mov	r2, r3
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <main+0xa8>)
 8000522:	801a      	strh	r2, [r3, #0]

    // lay gia trij bui
    getPM25();
 8000524:	f000 fd96 	bl	8001054 <getPM25>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8000528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052c:	f001 f976 	bl	800181c <HAL_Delay>
	  getSVM30();
 8000530:	f000 fb18 	bl	8000b64 <getSVM30>

	  /* Persist the current baseline every hour */
	  if (++i % 3600 == 3599) {
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <main+0xac>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	b29a      	uxth	r2, r3
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <main+0xac>)
 800053e:	801a      	strh	r2, [r3, #0]
 8000540:	4b10      	ldr	r3, [pc, #64]	; (8000584 <main+0xac>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	4a10      	ldr	r2, [pc, #64]	; (8000588 <main+0xb0>)
 8000546:	fba2 1203 	umull	r1, r2, r2, r3
 800054a:	0ad2      	lsrs	r2, r2, #11
 800054c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000550:	fb01 f202 	mul.w	r2, r1, r2
 8000554:	1a9b      	subs	r3, r3, r2
 8000556:	b29b      	uxth	r3, r3
 8000558:	f640 620f 	movw	r2, #3599	; 0xe0f
 800055c:	4293      	cmp	r3, r2
 800055e:	d1e3      	bne.n	8000528 <main+0x50>
		  err = sgp30_get_iaq_baseline(&iaq_baseline);
 8000560:	480a      	ldr	r0, [pc, #40]	; (800058c <main+0xb4>)
 8000562:	f000 fbed 	bl	8000d40 <sgp30_get_iaq_baseline>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <main+0xa8>)
 800056c:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(1000);
 800056e:	e7db      	b.n	8000528 <main+0x50>
 8000570:	20000124 	.word	0x20000124
 8000574:	2000017c 	.word	0x2000017c
 8000578:	08004f88 	.word	0x08004f88
 800057c:	08004fa4 	.word	0x08004fa4
 8000580:	20000178 	.word	0x20000178
 8000584:	20000090 	.word	0x20000090
 8000588:	91a2b3c5 	.word	0x91a2b3c5
 800058c:	200001bc 	.word	0x200001bc

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 f876 	bl	8004690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <SystemClock_Config+0xc8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a26      	ldr	r2, [pc, #152]	; (8000658 <SystemClock_Config+0xc8>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <SystemClock_Config+0xc8>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <SystemClock_Config+0xcc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <SystemClock_Config+0xcc>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <SystemClock_Config+0xcc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000600:	2308      	movs	r3, #8
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000604:	2354      	movs	r3, #84	; 0x54
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f002 feb7 	bl	8003388 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000620:	f000 f8be 	bl	80007a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2102      	movs	r1, #2
 8000640:	4618      	mov	r0, r3
 8000642:	f003 f911 	bl	8003868 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800064c:	f000 f8a8 	bl	80007a0 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	; 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2C2_Init+0x50>)
 8000666:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <MX_I2C2_Init+0x54>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_I2C2_Init+0x50>)
 800066c:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MX_I2C2_Init+0x58>)
 800066e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_I2C2_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_I2C2_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_I2C2_Init+0x50>)
 800067e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000682:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_I2C2_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_I2C2_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <MX_I2C2_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_I2C2_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_I2C2_Init+0x50>)
 800069e:	f001 feeb 	bl	8002478 <HAL_I2C_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006a8:	f000 f87a 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000124 	.word	0x20000124
 80006b4:	40005800 	.word	0x40005800
 80006b8:	000186a0 	.word	0x000186a0

080006bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART6_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART6_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART6_UART_Init+0x4c>)
 80006c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART6_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART6_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART6_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART6_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART6_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART6_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART6_UART_Init+0x4c>)
 80006f4:	f003 fa84 	bl	8003c00 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f84f 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000017c 	.word	0x2000017c
 800070c:	40011400 	.word	0x40011400

08000710 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_DMA_Init+0x3c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <MX_DMA_Init+0x3c>)
 8000720:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_DMA_Init+0x3c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2039      	movs	r0, #57	; 0x39
 8000738:	f001 f977 	bl	8001a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800073c:	2039      	movs	r0, #57	; 0x39
 800073e:	f001 f990 	bl	8001a62 <HAL_NVIC_EnableIRQ>

}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_GPIO_Init+0x4c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <MX_GPIO_Init+0x4c>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_GPIO_Init+0x4c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_GPIO_Init+0x4c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <MX_GPIO_Init+0x4c>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_GPIO_Init+0x4c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <sensirion_common_generate_crc>:
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"

uint8_t sensirion_common_generate_crc(uint8_t *data, uint16_t count) {
 80007ae:	b480      	push	{r7}
 80007b0:	b085      	sub	sp, #20
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
 80007b6:	460b      	mov	r3, r1
 80007b8:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80007ba:	23ff      	movs	r3, #255	; 0xff
 80007bc:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80007be:	2300      	movs	r3, #0
 80007c0:	81fb      	strh	r3, [r7, #14]
 80007c2:	e021      	b.n	8000808 <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 80007c4:	89fb      	ldrh	r3, [r7, #14]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	781a      	ldrb	r2, [r3, #0]
 80007cc:	7b7b      	ldrb	r3, [r7, #13]
 80007ce:	4053      	eors	r3, r2
 80007d0:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80007d2:	2308      	movs	r3, #8
 80007d4:	733b      	strb	r3, [r7, #12]
 80007d6:	e011      	b.n	80007fc <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 80007d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	da07      	bge.n	80007f0 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80007e0:	7b7b      	ldrb	r3, [r7, #13]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	737b      	strb	r3, [r7, #13]
 80007ee:	e002      	b.n	80007f6 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 80007f0:	7b7b      	ldrb	r3, [r7, #13]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80007f6:	7b3b      	ldrb	r3, [r7, #12]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	733b      	strb	r3, [r7, #12]
 80007fc:	7b3b      	ldrb	r3, [r7, #12]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1ea      	bne.n	80007d8 <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000802:	89fb      	ldrh	r3, [r7, #14]
 8000804:	3301      	adds	r3, #1
 8000806:	81fb      	strh	r3, [r7, #14]
 8000808:	89fa      	ldrh	r2, [r7, #14]
 800080a:	887b      	ldrh	r3, [r7, #2]
 800080c:	429a      	cmp	r2, r3
 800080e:	d3d9      	bcc.n	80007c4 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 8000810:	7b7b      	ldrb	r3, [r7, #13]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(uint8_t *data, uint16_t count,
                                  uint8_t checksum) {
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	460b      	mov	r3, r1
 8000828:	807b      	strh	r3, [r7, #2]
 800082a:	4613      	mov	r3, r2
 800082c:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 800082e:	887b      	ldrh	r3, [r7, #2]
 8000830:	4619      	mov	r1, r3
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffbb 	bl	80007ae <sensirion_common_generate_crc>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	787b      	ldrb	r3, [r7, #1]
 800083e:	4293      	cmp	r3, r2
 8000840:	d002      	beq.n	8000848 <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	e000      	b.n	800084a <sensirion_common_check_crc+0x2c>
    return STATUS_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <sensirion_fill_cmd_send_buf>:

uint16_t sensirion_fill_cmd_send_buf(uint8_t *buf, uint16_t cmd,
                                     const uint16_t *args, uint8_t num_args) {
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	607a      	str	r2, [r7, #4]
 800085c:	461a      	mov	r2, r3
 800085e:	460b      	mov	r3, r1
 8000860:	817b      	strh	r3, [r7, #10]
 8000862:	4613      	mov	r3, r2
 8000864:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 800086a:	897b      	ldrh	r3, [r7, #10]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	b29a      	uxth	r2, r3
 8000870:	8abb      	ldrh	r3, [r7, #20]
 8000872:	1c59      	adds	r1, r3, #1
 8000874:	82b9      	strh	r1, [r7, #20]
 8000876:	4619      	mov	r1, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	440b      	add	r3, r1
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8000880:	8abb      	ldrh	r3, [r7, #20]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	82ba      	strh	r2, [r7, #20]
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	897a      	ldrh	r2, [r7, #10]
 800088e:	b2d2      	uxtb	r2, r2
 8000890:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8000892:	2300      	movs	r3, #0
 8000894:	75fb      	strb	r3, [r7, #23]
 8000896:	e030      	b.n	80008fa <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8000898:	7dfb      	ldrb	r3, [r7, #23]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	4413      	add	r3, r2
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	0a1b      	lsrs	r3, r3, #8
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	8abb      	ldrh	r3, [r7, #20]
 80008a8:	1c59      	adds	r1, r3, #1
 80008aa:	82b9      	strh	r1, [r7, #20]
 80008ac:	4619      	mov	r1, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	440b      	add	r3, r1
 80008b2:	b2d2      	uxtb	r2, r2
 80008b4:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 80008b6:	7dfb      	ldrb	r3, [r7, #23]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	881a      	ldrh	r2, [r3, #0]
 80008c0:	8abb      	ldrh	r3, [r7, #20]
 80008c2:	1c59      	adds	r1, r3, #1
 80008c4:	82b9      	strh	r1, [r7, #20]
 80008c6:	4619      	mov	r1, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	440b      	add	r3, r1
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t *)&buf[idx - 2],
 80008d0:	8abb      	ldrh	r3, [r7, #20]
 80008d2:	3b02      	subs	r3, #2
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	4413      	add	r3, r2
 80008d8:	2102      	movs	r1, #2
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff67 	bl	80007ae <sensirion_common_generate_crc>
 80008e0:	4603      	mov	r3, r0
 80008e2:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 80008e4:	8abb      	ldrh	r3, [r7, #20]
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	82ba      	strh	r2, [r7, #20]
 80008ea:	461a      	mov	r2, r3
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	4413      	add	r3, r2
 80008f0:	7cfa      	ldrb	r2, [r7, #19]
 80008f2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 80008f4:	7dfb      	ldrb	r3, [r7, #23]
 80008f6:	3301      	adds	r3, #1
 80008f8:	75fb      	strb	r3, [r7, #23]
 80008fa:	7dfa      	ldrb	r2, [r7, #23]
 80008fc:	7a7b      	ldrb	r3, [r7, #9]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d3ca      	bcc.n	8000898 <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 8000902:	8abb      	ldrh	r3, [r7, #20]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t *data,
                                          uint16_t num_words) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b096      	sub	sp, #88	; 0x58
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	4613      	mov	r3, r2
 800091a:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 800091c:	88bb      	ldrh	r3, [r7, #4]
 800091e:	461a      	mov	r2, r3
 8000920:	0052      	lsls	r2, r2, #1
 8000922:	4413      	add	r3, r2
 8000924:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t *const buf8 = (uint8_t *)word_buf;
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 800092e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f92e 	bl	8000b98 <sensirion_i2c_read>
 800093c:	4603      	mov	r3, r0
 800093e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != STATUS_OK)
 8000942:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000946:	2b00      	cmp	r3, #0
 8000948:	d002      	beq.n	8000950 <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 800094a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800094e:	e047      	b.n	80009e0 <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8000950:	2300      	movs	r3, #0
 8000952:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000956:	2300      	movs	r3, #0
 8000958:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800095c:	e039      	b.n	80009d2 <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800095e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000962:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000964:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8000966:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800096a:	3302      	adds	r3, #2
 800096c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800096e:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	2102      	movs	r1, #2
 8000976:	f7ff ff52 	bl	800081e <sensirion_common_check_crc>
 800097a:	4603      	mov	r3, r0
 800097c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != STATUS_OK)
 8000980:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000984:	2b00      	cmp	r3, #0
 8000986:	d002      	beq.n	800098e <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8000988:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800098c:	e028      	b.n	80009e0 <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 800098e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000992:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000994:	441a      	add	r2, r3
 8000996:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800099a:	1c59      	adds	r1, r3, #1
 800099c:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 80009a0:	4619      	mov	r1, r3
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	440b      	add	r3, r1
 80009a6:	7812      	ldrb	r2, [r2, #0]
 80009a8:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 80009aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80009ae:	3301      	adds	r3, #1
 80009b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009b2:	441a      	add	r2, r3
 80009b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80009b8:	1c59      	adds	r1, r3, #1
 80009ba:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 80009be:	4619      	mov	r1, r3
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	440b      	add	r3, r1
 80009c4:	7812      	ldrb	r2, [r2, #0]
 80009c6:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80009c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80009cc:	3303      	adds	r3, #3
 80009ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80009d2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80009d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80009da:	429a      	cmp	r2, r3
 80009dc:	d3bf      	bcc.n	800095e <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return STATUS_OK;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3758      	adds	r7, #88	; 0x58
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t *data_words,
                                 uint16_t num_words) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	4613      	mov	r3, r2
 80009f6:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t *)data_words,
 80009f8:	88ba      	ldrh	r2, [r7, #4]
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	6839      	ldr	r1, [r7, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff84 	bl	800090c <sensirion_i2c_read_words_as_bytes>
 8000a04:	4603      	mov	r3, r0
 8000a06:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != STATUS_OK)
 8000a08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <sensirion_i2c_read_words+0x2e>
        return ret;
 8000a10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a14:	e022      	b.n	8000a5c <sensirion_i2c_read_words+0x74>

    for (i = 0; i < num_words; ++i)
 8000a16:	2300      	movs	r3, #0
 8000a18:	73fb      	strb	r3, [r7, #15]
 8000a1a:	e019      	b.n	8000a50 <sensirion_i2c_read_words+0x68>
        data_words[i] = be16_to_cpu(data_words[i]);
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	6839      	ldr	r1, [r7, #0]
 8000a30:	440b      	add	r3, r1
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	b21b      	sxth	r3, r3
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b219      	sxth	r1, r3
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	683a      	ldr	r2, [r7, #0]
 8000a44:	4413      	add	r3, r2
 8000a46:	b28a      	uxth	r2, r1
 8000a48:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i)
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	88ba      	ldrh	r2, [r7, #4]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d8e0      	bhi.n	8000a1c <sensirion_i2c_read_words+0x34>

    return STATUS_OK;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	460a      	mov	r2, r1
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	4613      	mov	r3, r2
 8000a72:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8000a74:	88b9      	ldrh	r1, [r7, #4]
 8000a76:	f107 000c 	add.w	r0, r7, #12
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f7ff fee8 	bl	8000852 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8000a82:	f107 010c 	add.w	r1, r7, #12
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2202      	movs	r2, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f8a2 	bl	8000bd4 <sensirion_i2c_write>
 8000a90:	4603      	mov	r3, r0
 8000a92:	b21b      	sxth	r3, r3
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <sensirion_i2c_write_cmd_with_args>:

int16_t sensirion_i2c_write_cmd_with_args(uint8_t address, uint16_t command,
                                          const uint16_t *data_words,
                                          uint16_t num_words) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08e      	sub	sp, #56	; 0x38
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60ba      	str	r2, [r7, #8]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	73fb      	strb	r3, [r7, #15]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	81bb      	strh	r3, [r7, #12]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SENSIRION_MAX_BUFFER_WORDS];
    uint16_t buf_size;

    buf_size = sensirion_fill_cmd_send_buf(buf, command, data_words, num_words);
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	89b9      	ldrh	r1, [r7, #12]
 8000ab8:	f107 0014 	add.w	r0, r7, #20
 8000abc:	68ba      	ldr	r2, [r7, #8]
 8000abe:	f7ff fec8 	bl	8000852 <sensirion_fill_cmd_send_buf>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	86fb      	strh	r3, [r7, #54]	; 0x36
    return sensirion_i2c_write(address, buf, buf_size);
 8000ac6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ac8:	f107 0114 	add.w	r1, r7, #20
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f880 	bl	8000bd4 <sensirion_i2c_write>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	b21b      	sxth	r3, r3
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3738      	adds	r7, #56	; 0x38
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <sensirion_i2c_delayed_read_cmd>:

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t *data_words,
                                       uint16_t num_words) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60ba      	str	r2, [r7, #8]
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4603      	mov	r3, r0
 8000aec:	73fb      	strb	r3, [r7, #15]
 8000aee:	460b      	mov	r3, r1
 8000af0:	81bb      	strh	r3, [r7, #12]
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
 8000af2:	89b9      	ldrh	r1, [r7, #12]
 8000af4:	f107 0014 	add.w	r0, r7, #20
 8000af8:	2300      	movs	r3, #0
 8000afa:	2200      	movs	r2, #0
 8000afc:	f7ff fea9 	bl	8000852 <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8000b00:	f107 0114 	add.w	r1, r7, #20
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	2202      	movs	r2, #2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f863 	bl	8000bd4 <sensirion_i2c_write>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	82fb      	strh	r3, [r7, #22]
    if (ret != STATUS_OK)
 8000b12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <sensirion_i2c_delayed_read_cmd+0x40>
        return ret;
 8000b1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b1e:	e00c      	b.n	8000b3a <sensirion_i2c_delayed_read_cmd+0x5a>

    if (delay_us)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d002      	beq.n	8000b2c <sensirion_i2c_delayed_read_cmd+0x4c>
        sensirion_sleep_usec(delay_us);
 8000b26:	68b8      	ldr	r0, [r7, #8]
 8000b28:	f000 f872 	bl	8000c10 <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
 8000b2c:	8c3a      	ldrh	r2, [r7, #32]
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	6879      	ldr	r1, [r7, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff58 	bl	80009e8 <sensirion_i2c_read_words>
 8000b38:	4603      	mov	r3, r0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <i2c_init_sensirion>:
 */
static I2C_HandleTypeDef *i2c_svm30;
svm30 svm301;


void i2c_init_sensirion(I2C_HandleTypeDef * i2c_handler) {
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	i2c_svm30 = i2c_handler;
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <i2c_init_sensirion+0x1c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000094 	.word	0x20000094

08000b64 <getSVM30>:

int16_t getSVM30() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
	int16_t err;
    err = svm_measure_iaq_blocking_read(&svm301.tvoc_ppb, &svm301.co2_eq_ppm,&svm301.temperature, &svm301.humidity);
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <getSVM30+0x24>)
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <getSVM30+0x28>)
 8000b6e:	4908      	ldr	r1, [pc, #32]	; (8000b90 <getSVM30+0x2c>)
 8000b70:	4808      	ldr	r0, [pc, #32]	; (8000b94 <getSVM30+0x30>)
 8000b72:	f000 fcbc 	bl	80014ee <svm_measure_iaq_blocking_read>
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
    return err;
 8000b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001c4 	.word	0x200001c4
 8000b8c:	200001c0 	.word	0x200001c0
 8000b90:	200001ca 	.word	0x200001ca
 8000b94:	200001c8 	.word	0x200001c8

08000b98 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t *data, uint16_t count) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Receive(i2c_svm30, (uint16_t)(address << 1),
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <sensirion_i2c_read+0x38>)
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	b299      	uxth	r1, r3
 8000bb4:	88ba      	ldrh	r2, [r7, #4]
 8000bb6:	2364      	movs	r3, #100	; 0x64
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	f001 fe91 	bl	80028e4 <HAL_I2C_Master_Receive>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000094 	.word	0x20000094

08000bd4 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t *data,
                           uint16_t count) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Transmit(i2c_svm30, (uint16_t)(address << 1),
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <sensirion_i2c_write+0x38>)
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	b299      	uxth	r1, r3
 8000bf0:	88ba      	ldrh	r2, [r7, #4]
 8000bf2:	2364      	movs	r3, #100	; 0x64
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	f001 fd75 	bl	80026e8 <HAL_I2C_Master_Transmit>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b25b      	sxtb	r3, r3
                                           (uint8_t *)data, count, 100);
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000094 	.word	0x20000094

08000c10 <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <sensirion_sleep_usec+0x54>)
 8000c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c20:	099b      	lsrs	r3, r3, #6
 8000c22:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <sensirion_sleep_usec+0x54>)
 8000c28:	fba3 1302 	umull	r1, r3, r3, r2
 8000c2c:	099b      	lsrs	r3, r3, #6
 8000c2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c32:	fb01 f303 	mul.w	r3, r1, r3
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <sensirion_sleep_usec+0x32>
        msec++;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8000c42:	f000 fe0d 	bl	8001860 <HAL_GetHalVersion>
 8000c46:	4602      	mov	r2, r0
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <sensirion_sleep_usec+0x58>)
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d802      	bhi.n	8000c54 <sensirion_sleep_usec+0x44>
        msec++;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3301      	adds	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f000 fde1 	bl	800181c <HAL_Delay>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	10624dd3 	.word	0x10624dd3
 8000c68:	010100ff 	.word	0x010100ff

08000c6c <sgp30_check_featureset>:
 *         SGP30_ERR_INVALID_PRODUCT_TYPE if the sensor is not an SGP30,
 *         SGP30_ERR_UNSUPPORTED_FEATURE_SET if the sensor does not
 *                                           have the required FS,
 *         an error code otherwise
 */
static int16_t sgp30_check_featureset(uint16_t needed_fs) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
    int16_t ret;
    uint16_t fs_version;
    uint8_t product_type;

    ret = sgp30_get_feature_set_version(&fs_version, &product_type);
 8000c76:	f107 020b 	add.w	r2, r7, #11
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f8bd 	bl	8000e00 <sgp30_get_feature_set_version>
 8000c86:	4603      	mov	r3, r0
 8000c88:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 8000c8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <sgp30_check_featureset+0x2c>
        return ret;
 8000c92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c96:	e00d      	b.n	8000cb4 <sgp30_check_featureset+0x48>

    if (product_type != SGP30_PRODUCT_TYPE)
 8000c98:	7afb      	ldrb	r3, [r7, #11]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <sgp30_check_featureset+0x38>
        return SGP30_ERR_INVALID_PRODUCT_TYPE;
 8000c9e:	f06f 030b 	mvn.w	r3, #11
 8000ca2:	e007      	b.n	8000cb4 <sgp30_check_featureset+0x48>

    if (fs_version < needed_fs)
 8000ca4:	89bb      	ldrh	r3, [r7, #12]
 8000ca6:	88fa      	ldrh	r2, [r7, #6]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d902      	bls.n	8000cb2 <sgp30_check_featureset+0x46>
        return SGP30_ERR_UNSUPPORTED_FEATURE_SET;
 8000cac:	f06f 0309 	mvn.w	r3, #9
 8000cb0:	e000      	b.n	8000cb4 <sgp30_check_featureset+0x48>

    return STATUS_OK;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <sgp30_measure_iaq>:
        return STATUS_OK;

    return STATUS_FAIL;
}

int16_t sgp30_measure_iaq() {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_MEASURE);
 8000cc0:	2358      	movs	r3, #88	; 0x58
 8000cc2:	f242 0108 	movw	r1, #8200	; 0x2008
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fecc 	bl	8000a64 <sensirion_i2c_write_cmd>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <sgp30_read_iaq>:

int16_t sgp30_read_iaq(uint16_t *tvoc_ppb, uint16_t *co2_eq_ppm) {
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b084      	sub	sp, #16
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_IAQ_MEASURE_WORDS];

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 8000cdc:	2058      	movs	r0, #88	; 0x58
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f7ff fe7f 	bl	80009e8 <sensirion_i2c_read_words>
 8000cea:	4603      	mov	r3, r0
 8000cec:	81fb      	strh	r3, [r7, #14]
                                   SGP30_CMD_IAQ_MEASURE_WORDS);

    *tvoc_ppb = words[1];
 8000cee:	897a      	ldrh	r2, [r7, #10]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = words[0];
 8000cf4:	893a      	ldrh	r2, [r7, #8]
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	801a      	strh	r2, [r3, #0]

    return ret;
 8000cfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <sgp30_measure_iaq_blocking_read>:

int16_t sgp30_measure_iaq_blocking_read(uint16_t *tvoc_ppb,
                                        uint16_t *co2_eq_ppm) {
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b084      	sub	sp, #16
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sgp30_measure_iaq();
 8000d10:	f7ff ffd4 	bl	8000cbc <sgp30_measure_iaq>
 8000d14:	4603      	mov	r3, r0
 8000d16:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 8000d18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <sgp30_measure_iaq_blocking_read+0x20>
        return ret;
 8000d20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d24:	e008      	b.n	8000d38 <sgp30_measure_iaq_blocking_read+0x32>

    sensirion_sleep_usec(SGP30_CMD_IAQ_MEASURE_DURATION_US);
 8000d26:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8000d2a:	f7ff ff71 	bl	8000c10 <sensirion_sleep_usec>

    return sgp30_read_iaq(tvoc_ppb, co2_eq_ppm);
 8000d2e:	6839      	ldr	r1, [r7, #0]
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ffce 	bl	8000cd2 <sgp30_read_iaq>
 8000d36:	4603      	mov	r3, r0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <sgp30_get_iaq_baseline>:
    *h2_raw_signal = words[0];

    return ret;
}

int16_t sgp30_get_iaq_baseline(uint32_t *baseline) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint16_t words[SGP30_CMD_GET_IAQ_BASELINE_WORDS];

    ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_GET_IAQ_BASELINE);
 8000d48:	2358      	movs	r3, #88	; 0x58
    ret =
 8000d4a:	f242 0115 	movw	r1, #8213	; 0x2015
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fe88 	bl	8000a64 <sensirion_i2c_write_cmd>
 8000d54:	4603      	mov	r3, r0
 8000d56:	81fb      	strh	r3, [r7, #14]

    if (ret != STATUS_OK)
 8000d58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d002      	beq.n	8000d66 <sgp30_get_iaq_baseline+0x26>
        return ret;
 8000d60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d64:	e021      	b.n	8000daa <sgp30_get_iaq_baseline+0x6a>

    sensirion_sleep_usec(SGP30_CMD_GET_IAQ_BASELINE_DURATION_US);
 8000d66:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d6a:	f7ff ff51 	bl	8000c10 <sensirion_sleep_usec>

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 8000d6e:	2058      	movs	r0, #88	; 0x58
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	2202      	movs	r2, #2
 8000d76:	4619      	mov	r1, r3
 8000d78:	f7ff fe36 	bl	80009e8 <sensirion_i2c_read_words>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	81fb      	strh	r3, [r7, #14]
                                   SGP30_CMD_GET_IAQ_BASELINE_WORDS);

    if (ret != STATUS_OK)
 8000d80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <sgp30_get_iaq_baseline+0x4e>
        return ret;
 8000d88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d8c:	e00d      	b.n	8000daa <sgp30_get_iaq_baseline+0x6a>

    *baseline = ((uint32_t)words[1] << 16) | ((uint32_t)words[0]);
 8000d8e:	897b      	ldrh	r3, [r7, #10]
 8000d90:	041b      	lsls	r3, r3, #16
 8000d92:	893a      	ldrh	r2, [r7, #8]
 8000d94:	431a      	orrs	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]

    if (*baseline)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <sgp30_get_iaq_baseline+0x66>
        return STATUS_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e001      	b.n	8000daa <sgp30_get_iaq_baseline+0x6a>
    return STATUS_FAIL;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <sgp30_set_absolute_humidity>:
    sensirion_sleep_usec(SGP30_CMD_SET_TVOC_BASELINE_DURATION_US);

    return ret;
}

int16_t sgp30_set_absolute_humidity(uint32_t absolute_humidity) {
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint16_t ah_scaled;

    if (absolute_humidity > 256000)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
 8000dc0:	d902      	bls.n	8000dc8 <sgp30_set_absolute_humidity+0x16>
        return STATUS_FAIL;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e017      	b.n	8000df8 <sgp30_set_absolute_humidity+0x46>

    /* ah_scaled = (absolute_humidity / 1000) * 256 */
    ah_scaled = (uint16_t)((absolute_humidity * 16777) >> 16);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f244 1289 	movw	r2, #16777	; 0x4189
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	0c1b      	lsrs	r3, r3, #16
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	81bb      	strh	r3, [r7, #12]

    ret = sensirion_i2c_write_cmd_with_args(
 8000dd8:	2058      	movs	r0, #88	; 0x58
 8000dda:	f107 020c 	add.w	r2, r7, #12
 8000dde:	2301      	movs	r3, #1
 8000de0:	f242 0161 	movw	r1, #8289	; 0x2061
 8000de4:	f7ff fe5a 	bl	8000a9c <sensirion_i2c_write_cmd_with_args>
 8000de8:	4603      	mov	r3, r0
 8000dea:	81fb      	strh	r3, [r7, #14]
        SGP30_I2C_ADDRESS, SGP30_CMD_SET_ABSOLUTE_HUMIDITY, &ah_scaled,
        SENSIRION_NUM_WORDS(ah_scaled));

    sensirion_sleep_usec(SGP30_CMD_SET_ABSOLUTE_HUMIDITY_DURATION_US);
 8000dec:	f242 7010 	movw	r0, #10000	; 0x2710
 8000df0:	f7ff ff0e 	bl	8000c10 <sensirion_sleep_usec>

    return ret;
 8000df4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <sgp30_get_feature_set_version>:
uint8_t sgp30_get_configured_address() {
    return SGP30_I2C_ADDRESS;
}

int16_t sgp30_get_feature_set_version(uint16_t *feature_set_version,
                                      uint8_t *product_type) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_GET_FEATURESET_WORDS];

    ret = sensirion_i2c_delayed_read_cmd(SGP30_I2C_ADDRESS,
 8000e0a:	2058      	movs	r0, #88	; 0x58
 8000e0c:	f107 020c 	add.w	r2, r7, #12
 8000e10:	2301      	movs	r3, #1
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	4613      	mov	r3, r2
 8000e16:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e1a:	f242 012f 	movw	r1, #8239	; 0x202f
 8000e1e:	f7ff fe5f 	bl	8000ae0 <sensirion_i2c_delayed_read_cmd>
 8000e22:	4603      	mov	r3, r0
 8000e24:	81fb      	strh	r3, [r7, #14]
                                         SGP30_CMD_GET_FEATURESET,
                                         SGP30_CMD_GET_FEATURESET_DURATION_US,
                                         words, SGP30_CMD_GET_FEATURESET_WORDS);

    if (ret != STATUS_OK)
 8000e26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <sgp30_get_feature_set_version+0x34>
        return ret;
 8000e2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e32:	e00b      	b.n	8000e4c <sgp30_get_feature_set_version+0x4c>

    *feature_set_version = words[0] & 0x00FF;
 8000e34:	89bb      	ldrh	r3, [r7, #12]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	801a      	strh	r2, [r3, #0]
    *product_type = (uint8_t)((words[0] & 0xF000) >> 12);
 8000e3e:	89bb      	ldrh	r3, [r7, #12]
 8000e40:	0b1b      	lsrs	r3, r3, #12
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	701a      	strb	r2, [r3, #0]

    return STATUS_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <sgp30_iaq_init>:
                 (((uint64_t)words[2]) << 0);

    return STATUS_OK;
}

int16_t sgp30_iaq_init() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
    int16_t ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_INIT);
 8000e5a:	2358      	movs	r3, #88	; 0x58
    int16_t ret =
 8000e5c:	f242 0103 	movw	r1, #8195	; 0x2003
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fdff 	bl	8000a64 <sensirion_i2c_write_cmd>
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
    sensirion_sleep_usec(SGP30_CMD_IAQ_INIT_DURATION_US);
 8000e6a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e6e:	f7ff fecf 	bl	8000c10 <sensirion_sleep_usec>
    return ret;
 8000e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <sgp30_probe>:

int16_t sgp30_probe() {
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
    int16_t ret = sgp30_check_featureset(0x20);
 8000e84:	2020      	movs	r0, #32
 8000e86:	f7ff fef1 	bl	8000c6c <sgp30_check_featureset>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]

    if (ret != STATUS_OK)
 8000e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <sgp30_probe+0x1e>
        return ret;
 8000e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e9a:	e002      	b.n	8000ea2 <sgp30_probe+0x24>

    return sgp30_iaq_init();
 8000e9c:	f7ff ffda 	bl	8000e54 <sgp30_iaq_init>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <shtc1_wake_up>:

int16_t shtc1_sleep(void) {
    return sensirion_i2c_write_cmd(SHTC1_ADDRESS, SHTC3_CMD_SLEEP);
}

int16_t shtc1_wake_up(void) {
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SHTC1_ADDRESS, SHTC3_CMD_WAKEUP);
 8000eae:	2370      	movs	r3, #112	; 0x70
 8000eb0:	f243 5217 	movw	r2, #13591	; 0x3517
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fdd4 	bl	8000a64 <sensirion_i2c_write_cmd>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <shtc1_measure_blocking_read>:

int16_t shtc1_measure_blocking_read(int32_t *temperature, int32_t *humidity) {
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = shtc1_measure();
 8000ecc:	f000 f816 	bl	8000efc <shtc1_measure>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	81fb      	strh	r3, [r7, #14]
    if (ret)
 8000ed4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <shtc1_measure_blocking_read+0x20>
        return ret;
 8000edc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ee0:	e008      	b.n	8000ef4 <shtc1_measure_blocking_read+0x32>
#if !defined(USE_SENSIRION_CLOCK_STRETCHING) || !USE_SENSIRION_CLOCK_STRETCHING
    sensirion_sleep_usec(SHTC1_MEASUREMENT_DURATION_USEC);
 8000ee2:	f44f 5061 	mov.w	r0, #14400	; 0x3840
 8000ee6:	f7ff fe93 	bl	8000c10 <sensirion_sleep_usec>
#endif /* USE_SENSIRION_CLOCK_STRETCHING */
    return shtc1_read(temperature, humidity);
 8000eea:	6839      	ldr	r1, [r7, #0]
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 f813 	bl	8000f18 <shtc1_read>
 8000ef2:	4603      	mov	r3, r0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <shtc1_measure>:

int16_t shtc1_measure(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SHTC1_ADDRESS, shtc1_cmd_measure);
 8000f00:	2270      	movs	r2, #112	; 0x70
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <shtc1_measure+0x18>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	4619      	mov	r1, r3
 8000f08:	4610      	mov	r0, r2
 8000f0a:	f7ff fdab 	bl	8000a64 <sensirion_i2c_write_cmd>
 8000f0e:	4603      	mov	r3, r0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000

08000f18 <shtc1_read>:

int16_t shtc1_read(int32_t *temperature, int32_t *humidity) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHTC1_ADDRESS, words,
 8000f22:	2070      	movs	r0, #112	; 0x70
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	2202      	movs	r2, #2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f7ff fd5c 	bl	80009e8 <sensirion_i2c_read_words>
 8000f30:	4603      	mov	r3, r0
 8000f32:	81fb      	strh	r3, [r7, #14]
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = 100 * S_RH / 2^16
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
 8000f34:	893b      	ldrh	r3, [r7, #8]
 8000f36:	461a      	mov	r2, r3
 8000f38:	f245 5373 	movw	r3, #21875	; 0x5573
 8000f3c:	fb03 f302 	mul.w	r3, r3, r2
 8000f40:	135b      	asrs	r3, r3, #13
 8000f42:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 8000f46:	3bc8      	subs	r3, #200	; 0xc8
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	6013      	str	r3, [r2, #0]
    *humidity = ((12500 * (int32_t)words[1]) >> 13);
 8000f4c:	897b      	ldrh	r3, [r7, #10]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8000f54:	fb03 f302 	mul.w	r3, r3, r2
 8000f58:	135a      	asrs	r2, r3, #13
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	601a      	str	r2, [r3, #0]

    return ret;
 8000f5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <shtc1_probe>:

int16_t shtc1_probe(void) {
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
    uint32_t serial;

    (void)shtc1_wake_up(); /* Try to wake up the sensor, ignore return value */
 8000f70:	f7ff ff9b 	bl	8000eaa <shtc1_wake_up>
    return shtc1_read_serial(&serial);
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f805 	bl	8000f86 <shtc1_read_serial>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <shtc1_read_serial>:
void shtc1_enable_low_power_mode(uint8_t enable_low_power_mode) {
    shtc1_cmd_measure =
        enable_low_power_mode ? SHTC1_CMD_MEASURE_LPM : SHTC1_CMD_MEASURE_HPM;
}

int16_t shtc1_read_serial(uint32_t *serial) {
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af02      	add	r7, sp, #8
 8000f8c:	6078      	str	r0, [r7, #4]
    int16_t ret;
    const uint16_t tx_words[] = {0x007B};
 8000f8e:	237b      	movs	r3, #123	; 0x7b
 8000f90:	81bb      	strh	r3, [r7, #12]
    uint16_t serial_words[SENSIRION_NUM_WORDS(*serial)];

    ret = sensirion_i2c_write_cmd_with_args(SHTC1_ADDRESS, 0xC595, tx_words,
 8000f92:	2070      	movs	r0, #112	; 0x70
 8000f94:	f107 020c 	add.w	r2, r7, #12
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f24c 5195 	movw	r1, #50581	; 0xc595
 8000f9e:	f7ff fd7d 	bl	8000a9c <sensirion_i2c_write_cmd_with_args>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	81fb      	strh	r3, [r7, #14]
                                            SENSIRION_NUM_WORDS(tx_words));
    if (ret)
 8000fa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <shtc1_read_serial+0x2e>
        return ret;
 8000fae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fb2:	e03b      	b.n	800102c <shtc1_read_serial+0xa6>

    sensirion_sleep_usec(SHTC1_CMD_DURATION_USEC);
 8000fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fe29 	bl	8000c10 <sensirion_sleep_usec>

    ret = sensirion_i2c_delayed_read_cmd(
 8000fbe:	2070      	movs	r0, #112	; 0x70
 8000fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f107 0208 	add.w	r2, r7, #8
 8000fca:	2301      	movs	r3, #1
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	f24c 71f7 	movw	r1, #51191	; 0xc7f7
 8000fd6:	f7ff fd83 	bl	8000ae0 <sensirion_i2c_delayed_read_cmd>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	81fb      	strh	r3, [r7, #14]
        SHTC1_ADDRESS, 0xC7F7, SHTC1_CMD_DURATION_USEC, &serial_words[0], 1);
    if (ret)
 8000fde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <shtc1_read_serial+0x66>
        return ret;
 8000fe6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fea:	e01f      	b.n	800102c <shtc1_read_serial+0xa6>

    ret = sensirion_i2c_delayed_read_cmd(
 8000fec:	2070      	movs	r0, #112	; 0x70
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	1c9a      	adds	r2, r3, #2
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	4613      	mov	r3, r2
 8001000:	460a      	mov	r2, r1
 8001002:	f24c 71f7 	movw	r1, #51191	; 0xc7f7
 8001006:	f7ff fd6b 	bl	8000ae0 <sensirion_i2c_delayed_read_cmd>
 800100a:	4603      	mov	r3, r0
 800100c:	81fb      	strh	r3, [r7, #14]
        SHTC1_ADDRESS, 0xC7F7, SHTC1_CMD_DURATION_USEC, &serial_words[1], 1);
    if (ret)
 800100e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <shtc1_read_serial+0x96>
        return ret;
 8001016:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800101a:	e007      	b.n	800102c <shtc1_read_serial+0xa6>

    *serial = ((uint32_t)serial_words[0] << 16) | serial_words[1];
 800101c:	893b      	ldrh	r3, [r7, #8]
 800101e:	041b      	lsls	r3, r3, #16
 8001020:	897a      	ldrh	r2, [r7, #10]
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	601a      	str	r2, [r3, #0]
    return ret;
 8001028:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <SM_UART_04L_Init>:
static uint8_t rxBuffer[32];

amphenol amphenol1;


void SM_UART_04L_Init(UART_HandleTypeDef * huart_handler) {
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	huart_sm_uart_04l = huart_handler;
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <SM_UART_04L_Init+0x1c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200001d8 	.word	0x200001d8

08001054 <getPM25>:


void getPM25(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(huart_sm_uart_04l, rxBuffer, sizeof(rxBuffer));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <getPM25+0x18>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2220      	movs	r2, #32
 800105e:	4904      	ldr	r1, [pc, #16]	; (8001070 <getPM25+0x1c>)
 8001060:	4618      	mov	r0, r3
 8001062:	f002 fe1b 	bl	8003c9c <HAL_UART_Receive_DMA>

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200001d8 	.word	0x200001d8
 8001070:	20000098 	.word	0x20000098

08001074 <HAL_UART_RxCpltCallback>:


__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  if ( rxBuffer[0] == 'B' && rxBuffer[1] == 'M') {
 800107c:	4b31      	ldr	r3, [pc, #196]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b42      	cmp	r3, #66	; 0x42
 8001082:	d14b      	bne.n	800111c <HAL_UART_RxCpltCallback+0xa8>
 8001084:	4b2f      	ldr	r3, [pc, #188]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 8001086:	785b      	ldrb	r3, [r3, #1]
 8001088:	2b4d      	cmp	r3, #77	; 0x4d
 800108a:	d147      	bne.n	800111c <HAL_UART_RxCpltCallback+0xa8>

	  amphenol1.PM1_Standard = rxBuffer[4]*256 + rxBuffer[5];
 800108c:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 800108e:	791b      	ldrb	r3, [r3, #4]
 8001090:	b29b      	uxth	r3, r3
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	b29a      	uxth	r2, r3
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 8001098:	795b      	ldrb	r3, [r3, #5]
 800109a:	b29b      	uxth	r3, r3
 800109c:	4413      	add	r3, r2
 800109e:	b29a      	uxth	r2, r3
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <HAL_UART_RxCpltCallback+0xd4>)
 80010a2:	801a      	strh	r2, [r3, #0]
	  amphenol1.PM2p5_Standard = rxBuffer[6]*256 + rxBuffer[7];
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 80010a6:	799b      	ldrb	r3, [r3, #6]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 80010b0:	79db      	ldrb	r3, [r3, #7]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4413      	add	r3, r2
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b23      	ldr	r3, [pc, #140]	; (8001148 <HAL_UART_RxCpltCallback+0xd4>)
 80010ba:	805a      	strh	r2, [r3, #2]
	  amphenol1.PM10_Standard = rxBuffer[8]*256 + rxBuffer[9];
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 80010be:	7a1b      	ldrb	r3, [r3, #8]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 80010c8:	7a5b      	ldrb	r3, [r3, #9]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4413      	add	r3, r2
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_UART_RxCpltCallback+0xd4>)
 80010d2:	809a      	strh	r2, [r3, #4]

	  amphenol1.PM1_Environment = rxBuffer[10]*256 + rxBuffer[11];
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 80010d6:	7a9b      	ldrb	r3, [r3, #10]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 80010e0:	7adb      	ldrb	r3, [r3, #11]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4413      	add	r3, r2
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <HAL_UART_RxCpltCallback+0xd4>)
 80010ea:	80da      	strh	r2, [r3, #6]
	  amphenol1.PM2p5_Environment = rxBuffer[12]*256 + rxBuffer[13];
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 80010ee:	7b1b      	ldrb	r3, [r3, #12]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 80010f8:	7b5b      	ldrb	r3, [r3, #13]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_UART_RxCpltCallback+0xd4>)
 8001102:	811a      	strh	r2, [r3, #8]
	  amphenol1.PM10_Environment = rxBuffer[14]*256 + rxBuffer[15];
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 8001106:	7b9b      	ldrb	r3, [r3, #14]
 8001108:	b29b      	uxth	r3, r3
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 8001110:	7bdb      	ldrb	r3, [r3, #15]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4413      	add	r3, r2
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_UART_RxCpltCallback+0xd4>)
 800111a:	815a      	strh	r2, [r3, #10]
  }
  for (int i = 0; i<32 ; i++) {
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	e007      	b.n	8001132 <HAL_UART_RxCpltCallback+0xbe>
	  rxBuffer[i] = 0;
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_UART_RxCpltCallback+0xd0>)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i<32 ; i++) {
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b1f      	cmp	r3, #31
 8001136:	ddf4      	ble.n	8001122 <HAL_UART_RxCpltCallback+0xae>
  }

}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	20000098 	.word	0x20000098
 8001148:	200001cc 	.word	0x200001cc

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_MspInit+0x4c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <HAL_MspInit+0x4c>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_MspInit+0x4c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_MspInit+0x4c>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <HAL_MspInit+0x4c>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_MspInit+0x4c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800

0800119c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a21      	ldr	r2, [pc, #132]	; (8001240 <HAL_I2C_MspInit+0xa4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d13c      	bne.n	8001238 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_I2C_MspInit+0xa8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <HAL_I2C_MspInit+0xa8>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_I2C_MspInit+0xa8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e0:	2312      	movs	r3, #18
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011ec:	2304      	movs	r3, #4
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4814      	ldr	r0, [pc, #80]	; (8001248 <HAL_I2C_MspInit+0xac>)
 80011f8:	f000 ffbc 	bl	8002174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011fc:	2308      	movs	r3, #8
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001200:	2312      	movs	r3, #18
 8001202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001204:	2301      	movs	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800120c:	2309      	movs	r3, #9
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <HAL_I2C_MspInit+0xac>)
 8001218:	f000 ffac 	bl	8002174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_I2C_MspInit+0xa8>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_I2C_MspInit+0xa8>)
 8001226:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_I2C_MspInit+0xa8>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40005800 	.word	0x40005800
 8001244:	40023800 	.word	0x40023800
 8001248:	40020400 	.word	0x40020400

0800124c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a30      	ldr	r2, [pc, #192]	; (800132c <HAL_UART_MspInit+0xe0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d15a      	bne.n	8001324 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <HAL_UART_MspInit+0xe4>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a2e      	ldr	r2, [pc, #184]	; (8001330 <HAL_UART_MspInit+0xe4>)
 8001278:	f043 0320 	orr.w	r3, r3, #32
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <HAL_UART_MspInit+0xe4>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f003 0320 	and.w	r3, r3, #32
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <HAL_UART_MspInit+0xe4>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a27      	ldr	r2, [pc, #156]	; (8001330 <HAL_UART_MspInit+0xe4>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <HAL_UART_MspInit+0xe4>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a6:	23c0      	movs	r3, #192	; 0xc0
 80012a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80012b6:	2308      	movs	r3, #8
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	481c      	ldr	r0, [pc, #112]	; (8001334 <HAL_UART_MspInit+0xe8>)
 80012c2:	f000 ff57 	bl	8002174 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <HAL_UART_MspInit+0xec>)
 80012c8:	4a1c      	ldr	r2, [pc, #112]	; (800133c <HAL_UART_MspInit+0xf0>)
 80012ca:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HAL_UART_MspInit+0xec>)
 80012ce:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80012d2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_UART_MspInit+0xec>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_UART_MspInit+0xec>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_UART_MspInit+0xec>)
 80012e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <HAL_UART_MspInit+0xec>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_UART_MspInit+0xec>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_UART_MspInit+0xec>)
 80012f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fa:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_UART_MspInit+0xec>)
 80012fe:	2200      	movs	r2, #0
 8001300:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_UART_MspInit+0xec>)
 8001304:	2200      	movs	r2, #0
 8001306:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001308:	480b      	ldr	r0, [pc, #44]	; (8001338 <HAL_UART_MspInit+0xec>)
 800130a:	f000 fbc5 	bl	8001a98 <HAL_DMA_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001314:	f7ff fa44 	bl	80007a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_UART_MspInit+0xec>)
 800131c:	635a      	str	r2, [r3, #52]	; 0x34
 800131e:	4a06      	ldr	r2, [pc, #24]	; (8001338 <HAL_UART_MspInit+0xec>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40011400 	.word	0x40011400
 8001330:	40023800 	.word	0x40023800
 8001334:	40020800 	.word	0x40020800
 8001338:	200000c4 	.word	0x200000c4
 800133c:	40026428 	.word	0x40026428

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001394:	f000 fa22 	bl	80017dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <DMA2_Stream1_IRQHandler+0x10>)
 80013a2:	f000 fc7f 	bl	8001ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200000c4 	.word	0x200000c4

080013b0 <svm_compensate_rht>:
#define T_HI 70000
static const uint32_t AH_LUT_100RH[] = {1078,  2364,  4849,  9383,   17243,
                                        30264, 50983, 82785, 130048, 198277};
static const uint32_t T_STEP = (T_HI - T_LO) / (ARRAY_SIZE(AH_LUT_100RH) - 1);

static void svm_compensate_rht(int32_t *temperature, int32_t *humidity) {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
    *temperature = ((*temperature * 8225) >> 13) - 500;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4613      	mov	r3, r2
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	4413      	add	r3, r2
 80013c4:	015b      	lsls	r3, r3, #5
 80013c6:	4413      	add	r3, r2
 80013c8:	135b      	asrs	r3, r3, #13
 80013ca:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	601a      	str	r2, [r3, #0]
    *humidity = (*humidity * 8397) >> 13;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f242 02cd 	movw	r2, #8397	; 0x20cd
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	135a      	asrs	r2, r3, #13
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	601a      	str	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <sensirion_calc_absolute_humidity>:
/**
 * Convert relative humidity [%RH*1000] and temperature [mC] to
 * absolute humidity [mg/m^3]
 */
static uint32_t sensirion_calc_absolute_humidity(const int32_t *temperature,
                                                 const int32_t *humidity) {
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
    uint32_t t, i, rem, ret;

    if (*humidity <= 0)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dc01      	bgt.n	8001406 <sensirion_calc_absolute_humidity+0x16>
        return 0;
 8001402:	2300      	movs	r3, #0
 8001404:	e04d      	b.n	80014a2 <sensirion_calc_absolute_humidity+0xb2>

    if (*temperature < T_LO)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a29      	ldr	r2, [pc, #164]	; (80014b0 <sensirion_calc_absolute_humidity+0xc0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	da02      	bge.n	8001416 <sensirion_calc_absolute_humidity+0x26>
        t = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e005      	b.n	8001422 <sensirion_calc_absolute_humidity+0x32>
    else
        t = (uint32_t)(*temperature - T_LO);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800141e:	3320      	adds	r3, #32
 8001420:	617b      	str	r3, [r7, #20]

    i = t / T_STEP;
 8001422:	f242 7210 	movw	r2, #10000	; 0x2710
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	fbb3 f3f2 	udiv	r3, r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
    rem = t % T_STEP;
 800142e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	fbb3 f1f2 	udiv	r1, r3, r2
 8001438:	fb02 f201 	mul.w	r2, r2, r1
 800143c:	1a9b      	subs	r3, r3, r2
 800143e:	60bb      	str	r3, [r7, #8]

    if (i >= ARRAY_SIZE(AH_LUT_100RH) - 1) {
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b08      	cmp	r3, #8
 8001444:	d902      	bls.n	800144c <sensirion_calc_absolute_humidity+0x5c>
        ret = AH_LUT_100RH[ARRAY_SIZE(AH_LUT_100RH) - 1];
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <sensirion_calc_absolute_humidity+0xc4>)
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	e01f      	b.n	800148c <sensirion_calc_absolute_humidity+0x9c>

    } else if (rem == 0) {
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <sensirion_calc_absolute_humidity+0x6e>
        ret = AH_LUT_100RH[i];
 8001452:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <sensirion_calc_absolute_humidity+0xc8>)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	e016      	b.n	800148c <sensirion_calc_absolute_humidity+0x9c>

    } else {
        ret = (AH_LUT_100RH[i] +
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <sensirion_calc_absolute_humidity+0xc8>)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
               ((AH_LUT_100RH[i + 1] - AH_LUT_100RH[i]) * rem / T_STEP));
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3301      	adds	r3, #1
 800146a:	4913      	ldr	r1, [pc, #76]	; (80014b8 <sensirion_calc_absolute_humidity+0xc8>)
 800146c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001470:	4811      	ldr	r0, [pc, #68]	; (80014b8 <sensirion_calc_absolute_humidity+0xc8>)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001478:	1acb      	subs	r3, r1, r3
 800147a:	68b9      	ldr	r1, [r7, #8]
 800147c:	fb01 f303 	mul.w	r3, r1, r3
 8001480:	f242 7110 	movw	r1, #10000	; 0x2710
 8001484:	fbb3 f3f1 	udiv	r3, r3, r1
        ret = (AH_LUT_100RH[i] +
 8001488:	4413      	add	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
    // Multiplication might overflow with a maximum of 3 digits
    // Trick: ((ret >> 3) * (uint32_t)(*humidity)) does never overflow
    // Now we only need to divide by 12500, as the tripple righ shift
    // divides by 8

    return ((ret >> 3) * (uint32_t)(*humidity)) / 12500;
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	08db      	lsrs	r3, r3, #3
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	fb02 f303 	mul.w	r3, r2, r3
 8001498:	089b      	lsrs	r3, r3, #2
 800149a:	4a08      	ldr	r2, [pc, #32]	; (80014bc <sensirion_calc_absolute_humidity+0xcc>)
 800149c:	fba2 2303 	umull	r2, r3, r2, r3
 80014a0:	0a1b      	lsrs	r3, r3, #8
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	ffffb1e0 	.word	0xffffb1e0
 80014b4:	00030685 	.word	0x00030685
 80014b8:	08004fc4 	.word	0x08004fc4
 80014bc:	14f8b589 	.word	0x14f8b589

080014c0 <svm_set_humidity>:

static int16_t svm_set_humidity(const int32_t *temperature,
                                const int32_t *humidity) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
    uint32_t absolute_humidity;

    absolute_humidity = sensirion_calc_absolute_humidity(temperature, humidity);
 80014ca:	6839      	ldr	r1, [r7, #0]
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff8f 	bl	80013f0 <sensirion_calc_absolute_humidity>
 80014d2:	60f8      	str	r0, [r7, #12]

    if (absolute_humidity == 0)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <svm_set_humidity+0x1e>
        absolute_humidity = 1; /* avoid disabling humidity compensation */
 80014da:	2301      	movs	r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]

    return sgp30_set_absolute_humidity(absolute_humidity);
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f7ff fc67 	bl	8000db2 <sgp30_set_absolute_humidity>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <svm_measure_iaq_blocking_read>:
//const char *svm_get_driver_version() {
//    return SGP_DRV_VERSION_STR;
//}

int16_t svm_measure_iaq_blocking_read(uint16_t *tvoc_ppb, uint16_t *co2_eq_ppm,
                                      int32_t *temperature, int32_t *humidity) {
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	603b      	str	r3, [r7, #0]
    int16_t err;

    err = shtc1_measure_blocking_read(temperature, humidity);
 80014fc:	6839      	ldr	r1, [r7, #0]
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fcdf 	bl	8000ec2 <shtc1_measure_blocking_read>
 8001504:	4603      	mov	r3, r0
 8001506:	82fb      	strh	r3, [r7, #22]
    if (err != STATUS_OK)
 8001508:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <svm_measure_iaq_blocking_read+0x28>
        return err;
 8001510:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001514:	e01e      	b.n	8001554 <svm_measure_iaq_blocking_read+0x66>

    err = svm_set_humidity(temperature, humidity);
 8001516:	6839      	ldr	r1, [r7, #0]
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffd1 	bl	80014c0 <svm_set_humidity>
 800151e:	4603      	mov	r3, r0
 8001520:	82fb      	strh	r3, [r7, #22]
    if (err != STATUS_OK)
 8001522:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <svm_measure_iaq_blocking_read+0x42>
        return err;
 800152a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800152e:	e011      	b.n	8001554 <svm_measure_iaq_blocking_read+0x66>

    svm_compensate_rht(temperature, humidity);
 8001530:	6839      	ldr	r1, [r7, #0]
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ff3c 	bl	80013b0 <svm_compensate_rht>

    err = sgp30_measure_iaq_blocking_read(tvoc_ppb, co2_eq_ppm);
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff fbe3 	bl	8000d06 <sgp30_measure_iaq_blocking_read>
 8001540:	4603      	mov	r3, r0
 8001542:	82fb      	strh	r3, [r7, #22]
    if (err != STATUS_OK)
 8001544:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <svm_measure_iaq_blocking_read+0x64>
        return err;
 800154c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001550:	e000      	b.n	8001554 <svm_measure_iaq_blocking_read+0x66>

    return STATUS_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <svm_probe>:
        return err;

    return STATUS_OK;
}

int16_t svm_probe() {
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
    int16_t err;

    err = shtc1_probe();
 8001562:	f7ff fd02 	bl	8000f6a <shtc1_probe>
 8001566:	4603      	mov	r3, r0
 8001568:	80fb      	strh	r3, [r7, #6]
    if (err != STATUS_OK)
 800156a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <svm_probe+0x1c>
        return err;
 8001572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001576:	e002      	b.n	800157e <svm_probe+0x22>

    return sgp30_probe();
 8001578:	f7ff fc81 	bl	8000e7e <sgp30_probe>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	e00a      	b.n	80015ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001598:	f3af 8000 	nop.w
 800159c:	4601      	mov	r1, r0
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	b2ca      	uxtb	r2, r1
 80015a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	3301      	adds	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	dbf0      	blt.n	8001598 <_read+0x12>
	}

return len;
 80015b6:	687b      	ldr	r3, [r7, #4]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e009      	b.n	80015e6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	60ba      	str	r2, [r7, #8]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3301      	adds	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	dbf1      	blt.n	80015d2 <_write+0x12>
	}
	return len;
 80015ee:	687b      	ldr	r3, [r7, #4]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_close>:

int _close(int file)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001620:	605a      	str	r2, [r3, #4]
	return 0;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_isatty>:

int _isatty(int file)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	return 1;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
	return 0;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <_sbrk+0x50>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x16>
		heap_end = &end;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <_sbrk+0x50>)
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <_sbrk+0x54>)
 8001674:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <_sbrk+0x50>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <_sbrk+0x50>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	466a      	mov	r2, sp
 8001686:	4293      	cmp	r3, r2
 8001688:	d907      	bls.n	800169a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800168a:	f002 ffd7 	bl	800463c <__errno>
 800168e:	4602      	mov	r2, r0
 8001690:	230c      	movs	r3, #12
 8001692:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	e006      	b.n	80016a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <_sbrk+0x50>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a03      	ldr	r2, [pc, #12]	; (80016b0 <_sbrk+0x50>)
 80016a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200000b8 	.word	0x200000b8
 80016b4:	200001e8 	.word	0x200001e8

080016b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <SystemInit+0x28>)
 80016be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c2:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <SystemInit+0x28>)
 80016c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SystemInit+0x28>)
 80016ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016d2:	609a      	str	r2, [r3, #8]
#endif
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800171c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016ea:	e003      	b.n	80016f4 <LoopCopyDataInit>

080016ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016f2:	3104      	adds	r1, #4

080016f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016f4:	480b      	ldr	r0, [pc, #44]	; (8001724 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016fc:	d3f6      	bcc.n	80016ec <CopyDataInit>
  ldr  r2, =_sbss
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001700:	e002      	b.n	8001708 <LoopFillZerobss>

08001702 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001702:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001704:	f842 3b04 	str.w	r3, [r2], #4

08001708 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800170a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800170c:	d3f9      	bcc.n	8001702 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800170e:	f7ff ffd3 	bl	80016b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001712:	f002 ff99 	bl	8004648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7fe fedf 	bl	80004d8 <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800171c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001720:	08005080 	.word	0x08005080
  ldr  r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001728:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800172c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001730:	200001e4 	.word	0x200001e4

08001734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC_IRQHandler>
	...

08001738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <HAL_Init+0x40>)
 8001742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <HAL_Init+0x40>)
 800174e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <HAL_Init+0x40>)
 800175a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 f957 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001766:	2000      	movs	r0, #0
 8001768:	f000 f808 	bl	800177c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176c:	f7ff fcee 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_InitTick+0x54>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x58>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f96f 	bl	8001a7e <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00e      	b.n	80017c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d80a      	bhi.n	80017c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 f937 	bl	8001a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_InitTick+0x5c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000004 	.word	0x20000004
 80017d4:	2000000c 	.word	0x2000000c
 80017d8:	20000008 	.word	0x20000008

080017dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x20>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x24>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_IncTick+0x24>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	2000000c 	.word	0x2000000c
 8001800:	200001dc 	.word	0x200001dc

08001804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	200001dc 	.word	0x200001dc

0800181c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff ffee 	bl	8001804 <HAL_GetTick>
 8001828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001834:	d005      	beq.n	8001842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_Delay+0x40>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001842:	bf00      	nop
 8001844:	f7ff ffde 	bl	8001804 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d8f7      	bhi.n	8001844 <HAL_Delay+0x28>
  {
  }
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000000c 	.word	0x2000000c

08001860 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <HAL_GetHalVersion+0x10>)
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	01070700 	.word	0x01070700

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db0b      	blt.n	8001902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	4907      	ldr	r1, [pc, #28]	; (8001910 <__NVIC_EnableIRQ+0x38>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f202 	lsl.w	r2, r0, r2
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff8e 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff29 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff3e 	bl	80018bc <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff8e 	bl	8001968 <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5d 	bl	8001914 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff31 	bl	80018d8 <__NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffa2 	bl	80019d0 <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff feae 	bl	8001804 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e099      	b.n	8001be8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad4:	e00f      	b.n	8001af6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ad6:	f7ff fe95 	bl	8001804 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d908      	bls.n	8001af6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2203      	movs	r2, #3
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e078      	b.n	8001be8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e8      	bne.n	8001ad6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_DMA_Init+0x158>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d107      	bne.n	8001b60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f023 0307 	bic.w	r3, r3, #7
 8001b76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d117      	bne.n	8001bba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00e      	beq.n	8001bba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 fa6f 	bl	8002080 <DMA_CheckFifoParam>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2240      	movs	r2, #64	; 0x40
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e016      	b.n	8001be8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 fa26 	bl	8002014 <DMA_CalcBaseAndBitshift>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	223f      	movs	r2, #63	; 0x3f
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	f010803f 	.word	0xf010803f

08001bf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_DMA_Start_IT+0x26>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e040      	b.n	8001c9c <HAL_DMA_Start_IT+0xa8>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d12f      	bne.n	8001c8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2202      	movs	r2, #2
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f9b8 	bl	8001fb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4c:	223f      	movs	r2, #63	; 0x3f
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0216 	orr.w	r2, r2, #22
 8001c62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d007      	beq.n	8001c7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0208 	orr.w	r2, r2, #8
 8001c7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e005      	b.n	8001c9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c96:	2302      	movs	r3, #2
 8001c98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cb0:	4b92      	ldr	r3, [pc, #584]	; (8001efc <HAL_DMA_IRQHandler+0x258>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a92      	ldr	r2, [pc, #584]	; (8001f00 <HAL_DMA_IRQHandler+0x25c>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0a9b      	lsrs	r3, r3, #10
 8001cbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	2208      	movs	r2, #8
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d01a      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d013      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0204 	bic.w	r2, r2, #4
 8001cf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d14:	2201      	movs	r2, #1
 8001d16:	409a      	lsls	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d012      	beq.n	8001d46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d32:	2201      	movs	r2, #1
 8001d34:	409a      	lsls	r2, r3
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3e:	f043 0202 	orr.w	r2, r3, #2
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d012      	beq.n	8001d7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00b      	beq.n	8001d7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d68:	2204      	movs	r2, #4
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d74:	f043 0204 	orr.w	r2, r3, #4
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d80:	2210      	movs	r2, #16
 8001d82:	409a      	lsls	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d043      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d03c      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9e:	2210      	movs	r2, #16
 8001da0:	409a      	lsls	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d018      	beq.n	8001de6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d108      	bne.n	8001dd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d024      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	4798      	blx	r3
 8001dd2:	e01f      	b.n	8001e14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01b      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	4798      	blx	r3
 8001de4:	e016      	b.n	8001e14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0208 	bic.w	r2, r2, #8
 8001e02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e18:	2220      	movs	r2, #32
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 808e 	beq.w	8001f42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8086 	beq.w	8001f42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d136      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0216 	bic.w	r2, r2, #22
 8001e5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <HAL_DMA_IRQHandler+0x1da>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0208 	bic.w	r2, r2, #8
 8001e8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	223f      	movs	r2, #63	; 0x3f
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d07d      	beq.n	8001fae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
        }
        return;
 8001eba:	e078      	b.n	8001fae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d01c      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d108      	bne.n	8001eea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d030      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4798      	blx	r3
 8001ee8:	e02b      	b.n	8001f42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d027      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
 8001efa:	e022      	b.n	8001f42 <HAL_DMA_IRQHandler+0x29e>
 8001efc:	20000004 	.word	0x20000004
 8001f00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10f      	bne.n	8001f32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0210 	bic.w	r2, r2, #16
 8001f20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d032      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d022      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2205      	movs	r2, #5
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3301      	adds	r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d307      	bcc.n	8001f8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f2      	bne.n	8001f6e <HAL_DMA_IRQHandler+0x2ca>
 8001f88:	e000      	b.n	8001f8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f8a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	4798      	blx	r3
 8001fac:	e000      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001fae:	bf00      	nop
    }
  }
}
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop

08001fb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b40      	cmp	r3, #64	; 0x40
 8001fe4:	d108      	bne.n	8001ff8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ff6:	e007      	b.n	8002008 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	60da      	str	r2, [r3, #12]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	3b10      	subs	r3, #16
 8002024:	4a14      	ldr	r2, [pc, #80]	; (8002078 <DMA_CalcBaseAndBitshift+0x64>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800202e:	4a13      	ldr	r2, [pc, #76]	; (800207c <DMA_CalcBaseAndBitshift+0x68>)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d909      	bls.n	8002056 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	1d1a      	adds	r2, r3, #4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	659a      	str	r2, [r3, #88]	; 0x58
 8002054:	e007      	b.n	8002066 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	aaaaaaab 	.word	0xaaaaaaab
 800207c:	08005004 	.word	0x08005004

08002080 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11f      	bne.n	80020da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d855      	bhi.n	800214c <DMA_CheckFifoParam+0xcc>
 80020a0:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <DMA_CheckFifoParam+0x28>)
 80020a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a6:	bf00      	nop
 80020a8:	080020b9 	.word	0x080020b9
 80020ac:	080020cb 	.word	0x080020cb
 80020b0:	080020b9 	.word	0x080020b9
 80020b4:	0800214d 	.word	0x0800214d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d045      	beq.n	8002150 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020c8:	e042      	b.n	8002150 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020d2:	d13f      	bne.n	8002154 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d8:	e03c      	b.n	8002154 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e2:	d121      	bne.n	8002128 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d836      	bhi.n	8002158 <DMA_CheckFifoParam+0xd8>
 80020ea:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <DMA_CheckFifoParam+0x70>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002107 	.word	0x08002107
 80020f8:	08002101 	.word	0x08002101
 80020fc:	08002119 	.word	0x08002119
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
      break;
 8002104:	e02f      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d024      	beq.n	800215c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002116:	e021      	b.n	800215c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002120:	d11e      	bne.n	8002160 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002126:	e01b      	b.n	8002160 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d902      	bls.n	8002134 <DMA_CheckFifoParam+0xb4>
 800212e:	2b03      	cmp	r3, #3
 8002130:	d003      	beq.n	800213a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002132:	e018      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
      break;
 8002138:	e015      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00e      	beq.n	8002164 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
      break;
 800214a:	e00b      	b.n	8002164 <DMA_CheckFifoParam+0xe4>
      break;
 800214c:	bf00      	nop
 800214e:	e00a      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      break;
 8002150:	bf00      	nop
 8002152:	e008      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      break;
 8002154:	bf00      	nop
 8002156:	e006      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      break;
 8002158:	bf00      	nop
 800215a:	e004      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      break;
 800215c:	bf00      	nop
 800215e:	e002      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      break;   
 8002160:	bf00      	nop
 8002162:	e000      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      break;
 8002164:	bf00      	nop
    }
  } 
  
  return status; 
 8002166:	7bfb      	ldrb	r3, [r7, #15]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	e159      	b.n	8002444 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002190:	2201      	movs	r2, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	f040 8148 	bne.w	800243e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d00b      	beq.n	80021ce <HAL_GPIO_Init+0x5a>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d007      	beq.n	80021ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c2:	2b11      	cmp	r3, #17
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b12      	cmp	r3, #18
 80021cc:	d130      	bne.n	8002230 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002204:	2201      	movs	r2, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 0201 	and.w	r2, r3, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0xfc>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b12      	cmp	r3, #18
 800226e:	d123      	bne.n	80022b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	08da      	lsrs	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3208      	adds	r2, #8
 8002278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	220f      	movs	r2, #15
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	08da      	lsrs	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3208      	adds	r2, #8
 80022b2:	69b9      	ldr	r1, [r7, #24]
 80022b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0203 	and.w	r2, r3, #3
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80a2 	beq.w	800243e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	4b56      	ldr	r3, [pc, #344]	; (8002458 <HAL_GPIO_Init+0x2e4>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4a55      	ldr	r2, [pc, #340]	; (8002458 <HAL_GPIO_Init+0x2e4>)
 8002304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002308:	6453      	str	r3, [r2, #68]	; 0x44
 800230a:	4b53      	ldr	r3, [pc, #332]	; (8002458 <HAL_GPIO_Init+0x2e4>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002316:	4a51      	ldr	r2, [pc, #324]	; (800245c <HAL_GPIO_Init+0x2e8>)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	3302      	adds	r3, #2
 800231e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	220f      	movs	r2, #15
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a48      	ldr	r2, [pc, #288]	; (8002460 <HAL_GPIO_Init+0x2ec>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d019      	beq.n	8002376 <HAL_GPIO_Init+0x202>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a47      	ldr	r2, [pc, #284]	; (8002464 <HAL_GPIO_Init+0x2f0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_GPIO_Init+0x1fe>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a46      	ldr	r2, [pc, #280]	; (8002468 <HAL_GPIO_Init+0x2f4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00d      	beq.n	800236e <HAL_GPIO_Init+0x1fa>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a45      	ldr	r2, [pc, #276]	; (800246c <HAL_GPIO_Init+0x2f8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <HAL_GPIO_Init+0x1f6>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a44      	ldr	r2, [pc, #272]	; (8002470 <HAL_GPIO_Init+0x2fc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_GPIO_Init+0x1f2>
 8002362:	2304      	movs	r3, #4
 8002364:	e008      	b.n	8002378 <HAL_GPIO_Init+0x204>
 8002366:	2307      	movs	r3, #7
 8002368:	e006      	b.n	8002378 <HAL_GPIO_Init+0x204>
 800236a:	2303      	movs	r3, #3
 800236c:	e004      	b.n	8002378 <HAL_GPIO_Init+0x204>
 800236e:	2302      	movs	r3, #2
 8002370:	e002      	b.n	8002378 <HAL_GPIO_Init+0x204>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_GPIO_Init+0x204>
 8002376:	2300      	movs	r3, #0
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	f002 0203 	and.w	r2, r2, #3
 800237e:	0092      	lsls	r2, r2, #2
 8002380:	4093      	lsls	r3, r2
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002388:	4934      	ldr	r1, [pc, #208]	; (800245c <HAL_GPIO_Init+0x2e8>)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3302      	adds	r3, #2
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002396:	4b37      	ldr	r3, [pc, #220]	; (8002474 <HAL_GPIO_Init+0x300>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ba:	4a2e      	ldr	r2, [pc, #184]	; (8002474 <HAL_GPIO_Init+0x300>)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023c0:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <HAL_GPIO_Init+0x300>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023e4:	4a23      	ldr	r2, [pc, #140]	; (8002474 <HAL_GPIO_Init+0x300>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <HAL_GPIO_Init+0x300>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800240e:	4a19      	ldr	r2, [pc, #100]	; (8002474 <HAL_GPIO_Init+0x300>)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002414:	4b17      	ldr	r3, [pc, #92]	; (8002474 <HAL_GPIO_Init+0x300>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002438:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <HAL_GPIO_Init+0x300>)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3301      	adds	r3, #1
 8002442:	61fb      	str	r3, [r7, #28]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2b0f      	cmp	r3, #15
 8002448:	f67f aea2 	bls.w	8002190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800244c:	bf00      	nop
 800244e:	3724      	adds	r7, #36	; 0x24
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	40023800 	.word	0x40023800
 800245c:	40013800 	.word	0x40013800
 8002460:	40020000 	.word	0x40020000
 8002464:	40020400 	.word	0x40020400
 8002468:	40020800 	.word	0x40020800
 800246c:	40020c00 	.word	0x40020c00
 8002470:	40021000 	.word	0x40021000
 8002474:	40013c00 	.word	0x40013c00

08002478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e11f      	b.n	80026ca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fe7c 	bl	800119c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2224      	movs	r2, #36	; 0x24
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0201 	bic.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024dc:	f001 fb68 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 80024e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4a7b      	ldr	r2, [pc, #492]	; (80026d4 <HAL_I2C_Init+0x25c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d807      	bhi.n	80024fc <HAL_I2C_Init+0x84>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a7a      	ldr	r2, [pc, #488]	; (80026d8 <HAL_I2C_Init+0x260>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	bf94      	ite	ls
 80024f4:	2301      	movls	r3, #1
 80024f6:	2300      	movhi	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	e006      	b.n	800250a <HAL_I2C_Init+0x92>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a77      	ldr	r2, [pc, #476]	; (80026dc <HAL_I2C_Init+0x264>)
 8002500:	4293      	cmp	r3, r2
 8002502:	bf94      	ite	ls
 8002504:	2301      	movls	r3, #1
 8002506:	2300      	movhi	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0db      	b.n	80026ca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a72      	ldr	r2, [pc, #456]	; (80026e0 <HAL_I2C_Init+0x268>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	0c9b      	lsrs	r3, r3, #18
 800251c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a64      	ldr	r2, [pc, #400]	; (80026d4 <HAL_I2C_Init+0x25c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d802      	bhi.n	800254c <HAL_I2C_Init+0xd4>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	3301      	adds	r3, #1
 800254a:	e009      	b.n	8002560 <HAL_I2C_Init+0xe8>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	4a63      	ldr	r2, [pc, #396]	; (80026e4 <HAL_I2C_Init+0x26c>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	099b      	lsrs	r3, r3, #6
 800255e:	3301      	adds	r3, #1
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	430b      	orrs	r3, r1
 8002566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002572:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4956      	ldr	r1, [pc, #344]	; (80026d4 <HAL_I2C_Init+0x25c>)
 800257c:	428b      	cmp	r3, r1
 800257e:	d80d      	bhi.n	800259c <HAL_I2C_Init+0x124>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1e59      	subs	r1, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fbb1 f3f3 	udiv	r3, r1, r3
 800258e:	3301      	adds	r3, #1
 8002590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002594:	2b04      	cmp	r3, #4
 8002596:	bf38      	it	cc
 8002598:	2304      	movcc	r3, #4
 800259a:	e04f      	b.n	800263c <HAL_I2C_Init+0x1c4>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d111      	bne.n	80025c8 <HAL_I2C_Init+0x150>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e58      	subs	r0, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	440b      	add	r3, r1
 80025b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b6:	3301      	adds	r3, #1
 80025b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf0c      	ite	eq
 80025c0:	2301      	moveq	r3, #1
 80025c2:	2300      	movne	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	e012      	b.n	80025ee <HAL_I2C_Init+0x176>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1e58      	subs	r0, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	0099      	lsls	r1, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	fbb0 f3f3 	udiv	r3, r0, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Init+0x17e>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e022      	b.n	800263c <HAL_I2C_Init+0x1c4>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10e      	bne.n	800261c <HAL_I2C_Init+0x1a4>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1e58      	subs	r0, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	460b      	mov	r3, r1
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	440b      	add	r3, r1
 800260c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002610:	3301      	adds	r3, #1
 8002612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261a:	e00f      	b.n	800263c <HAL_I2C_Init+0x1c4>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1e58      	subs	r0, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	0099      	lsls	r1, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002632:	3301      	adds	r3, #1
 8002634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	6809      	ldr	r1, [r1, #0]
 8002640:	4313      	orrs	r3, r2
 8002642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69da      	ldr	r2, [r3, #28]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800266a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6911      	ldr	r1, [r2, #16]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68d2      	ldr	r2, [r2, #12]
 8002676:	4311      	orrs	r1, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	430b      	orrs	r3, r1
 800267e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	000186a0 	.word	0x000186a0
 80026d8:	001e847f 	.word	0x001e847f
 80026dc:	003d08ff 	.word	0x003d08ff
 80026e0:	431bde83 	.word	0x431bde83
 80026e4:	10624dd3 	.word	0x10624dd3

080026e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	461a      	mov	r2, r3
 80026f4:	460b      	mov	r3, r1
 80026f6:	817b      	strh	r3, [r7, #10]
 80026f8:	4613      	mov	r3, r2
 80026fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff f882 	bl	8001804 <HAL_GetTick>
 8002700:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b20      	cmp	r3, #32
 800270c:	f040 80e0 	bne.w	80028d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2319      	movs	r3, #25
 8002716:	2201      	movs	r2, #1
 8002718:	4970      	ldr	r1, [pc, #448]	; (80028dc <HAL_I2C_Master_Transmit+0x1f4>)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fc56 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002726:	2302      	movs	r3, #2
 8002728:	e0d3      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_I2C_Master_Transmit+0x50>
 8002734:	2302      	movs	r3, #2
 8002736:	e0cc      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d007      	beq.n	800275e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800276c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2221      	movs	r2, #33	; 0x21
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2210      	movs	r2, #16
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	893a      	ldrh	r2, [r7, #8]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4a50      	ldr	r2, [pc, #320]	; (80028e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027a0:	8979      	ldrh	r1, [r7, #10]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	6a3a      	ldr	r2, [r7, #32]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fac2 	bl	8002d30 <I2C_MasterRequestWrite>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e08d      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027cc:	e066      	b.n	800289c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	6a39      	ldr	r1, [r7, #32]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fcd0 	bl	8003178 <I2C_WaitOnTXEFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00d      	beq.n	80027fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d107      	bne.n	80027f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e06b      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	781a      	ldrb	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b04      	cmp	r3, #4
 8002836:	d11b      	bne.n	8002870 <HAL_I2C_Master_Transmit+0x188>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	d017      	beq.n	8002870 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	6a39      	ldr	r1, [r7, #32]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fcc0 	bl	80031fa <I2C_WaitOnBTFFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00d      	beq.n	800289c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	2b04      	cmp	r3, #4
 8002886:	d107      	bne.n	8002898 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002896:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e01a      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d194      	bne.n	80027ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	00100002 	.word	0x00100002
 80028e0:	ffff0000 	.word	0xffff0000

080028e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08c      	sub	sp, #48	; 0x30
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	461a      	mov	r2, r3
 80028f0:	460b      	mov	r3, r1
 80028f2:	817b      	strh	r3, [r7, #10]
 80028f4:	4613      	mov	r3, r2
 80028f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028f8:	f7fe ff84 	bl	8001804 <HAL_GetTick>
 80028fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b20      	cmp	r3, #32
 8002908:	f040 820b 	bne.w	8002d22 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2319      	movs	r3, #25
 8002912:	2201      	movs	r2, #1
 8002914:	497c      	ldr	r1, [pc, #496]	; (8002b08 <HAL_I2C_Master_Receive+0x224>)
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fb58 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002922:	2302      	movs	r3, #2
 8002924:	e1fe      	b.n	8002d24 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_I2C_Master_Receive+0x50>
 8002930:	2302      	movs	r3, #2
 8002932:	e1f7      	b.n	8002d24 <HAL_I2C_Master_Receive+0x440>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b01      	cmp	r3, #1
 8002948:	d007      	beq.n	800295a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0201 	orr.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002968:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2222      	movs	r2, #34	; 0x22
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2210      	movs	r2, #16
 8002976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	893a      	ldrh	r2, [r7, #8]
 800298a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4a5c      	ldr	r2, [pc, #368]	; (8002b0c <HAL_I2C_Master_Receive+0x228>)
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800299c:	8979      	ldrh	r1, [r7, #10]
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fa46 	bl	8002e34 <I2C_MasterRequestRead>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e1b8      	b.n	8002d24 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d113      	bne.n	80029e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ba:	2300      	movs	r3, #0
 80029bc:	623b      	str	r3, [r7, #32]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	623b      	str	r3, [r7, #32]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	623b      	str	r3, [r7, #32]
 80029ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e18c      	b.n	8002cfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d11b      	bne.n	8002a22 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	e16c      	b.n	8002cfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d11b      	bne.n	8002a62 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	e14c      	b.n	8002cfc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a88:	e138      	b.n	8002cfc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	f200 80f1 	bhi.w	8002c76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d123      	bne.n	8002ae4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fbeb 	bl	800327c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e139      	b.n	8002d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ae2:	e10b      	b.n	8002cfc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d14e      	bne.n	8002b8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	2200      	movs	r2, #0
 8002af4:	4906      	ldr	r1, [pc, #24]	; (8002b10 <HAL_I2C_Master_Receive+0x22c>)
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fa68 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e10e      	b.n	8002d24 <HAL_I2C_Master_Receive+0x440>
 8002b06:	bf00      	nop
 8002b08:	00100002 	.word	0x00100002
 8002b0c:	ffff0000 	.word	0xffff0000
 8002b10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b88:	e0b8      	b.n	8002cfc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	2200      	movs	r2, #0
 8002b92:	4966      	ldr	r1, [pc, #408]	; (8002d2c <HAL_I2C_Master_Receive+0x448>)
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fa19 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0bf      	b.n	8002d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bec:	2200      	movs	r2, #0
 8002bee:	494f      	ldr	r1, [pc, #316]	; (8002d2c <HAL_I2C_Master_Receive+0x448>)
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f9eb 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e091      	b.n	8002d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c74:	e042      	b.n	8002cfc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 fafe 	bl	800327c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e04c      	b.n	8002d24 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d118      	bne.n	8002cfc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f47f aec2 	bne.w	8002a8a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e000      	b.n	8002d24 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
  }
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3728      	adds	r7, #40	; 0x28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	00010004 	.word	0x00010004

08002d30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d006      	beq.n	8002d5a <I2C_MasterRequestWrite+0x2a>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d003      	beq.n	8002d5a <I2C_MasterRequestWrite+0x2a>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d58:	d108      	bne.n	8002d6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e00b      	b.n	8002d84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	2b12      	cmp	r3, #18
 8002d72:	d107      	bne.n	8002d84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f91b 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00c      	beq.n	8002db6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e035      	b.n	8002e22 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dbe:	d108      	bne.n	8002dd2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dc0:	897b      	ldrh	r3, [r7, #10]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dce:	611a      	str	r2, [r3, #16]
 8002dd0:	e01b      	b.n	8002e0a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	11db      	asrs	r3, r3, #7
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f003 0306 	and.w	r3, r3, #6
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f063 030f 	orn	r3, r3, #15
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	490f      	ldr	r1, [pc, #60]	; (8002e2c <I2C_MasterRequestWrite+0xfc>)
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f942 	bl	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e010      	b.n	8002e22 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e00:	897b      	ldrh	r3, [r7, #10]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4908      	ldr	r1, [pc, #32]	; (8002e30 <I2C_MasterRequestWrite+0x100>)
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f932 	bl	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	00010008 	.word	0x00010008
 8002e30:	00010002 	.word	0x00010002

08002e34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	460b      	mov	r3, r1
 8002e42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d006      	beq.n	8002e6e <I2C_MasterRequestRead+0x3a>
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d003      	beq.n	8002e6e <I2C_MasterRequestRead+0x3a>
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e6c:	d108      	bne.n	8002e80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e00b      	b.n	8002e98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	2b11      	cmp	r3, #17
 8002e86:	d107      	bne.n	8002e98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f891 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00c      	beq.n	8002eca <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e078      	b.n	8002fbc <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ed2:	d108      	bne.n	8002ee6 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ed4:	897b      	ldrh	r3, [r7, #10]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	611a      	str	r2, [r3, #16]
 8002ee4:	e05e      	b.n	8002fa4 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ee6:	897b      	ldrh	r3, [r7, #10]
 8002ee8:	11db      	asrs	r3, r3, #7
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f003 0306 	and.w	r3, r3, #6
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f063 030f 	orn	r3, r3, #15
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	4930      	ldr	r1, [pc, #192]	; (8002fc4 <I2C_MasterRequestRead+0x190>)
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f8b8 	bl	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e053      	b.n	8002fbc <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f14:	897b      	ldrh	r3, [r7, #10]
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4929      	ldr	r1, [pc, #164]	; (8002fc8 <I2C_MasterRequestRead+0x194>)
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f8a8 	bl	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e043      	b.n	8002fbc <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f58:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f830 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e017      	b.n	8002fbc <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f8c:	897b      	ldrh	r3, [r7, #10]
 8002f8e:	11db      	asrs	r3, r3, #7
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 0306 	and.w	r3, r3, #6
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f063 030e 	orn	r3, r3, #14
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4907      	ldr	r1, [pc, #28]	; (8002fc8 <I2C_MasterRequestRead+0x194>)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f865 	bl	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	00010008 	.word	0x00010008
 8002fc8:	00010002 	.word	0x00010002

08002fcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fdc:	e025      	b.n	800302a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d021      	beq.n	800302a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7fe fc0d 	bl	8001804 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d116      	bne.n	800302a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f043 0220 	orr.w	r2, r3, #32
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e023      	b.n	8003072 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d10d      	bne.n	8003050 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4013      	ands	r3, r2
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf0c      	ite	eq
 8003046:	2301      	moveq	r3, #1
 8003048:	2300      	movne	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	e00c      	b.n	800306a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf0c      	ite	eq
 8003062:	2301      	moveq	r3, #1
 8003064:	2300      	movne	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	429a      	cmp	r2, r3
 800306e:	d0b6      	beq.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003088:	e051      	b.n	800312e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003098:	d123      	bne.n	80030e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f043 0204 	orr.w	r2, r3, #4
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e046      	b.n	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d021      	beq.n	800312e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7fe fb8b 	bl	8001804 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d116      	bne.n	800312e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e020      	b.n	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10c      	bne.n	8003152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	43da      	mvns	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4013      	ands	r3, r2
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf14      	ite	ne
 800314a:	2301      	movne	r3, #1
 800314c:	2300      	moveq	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	e00b      	b.n	800316a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	43da      	mvns	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4013      	ands	r3, r2
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d18d      	bne.n	800308a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003184:	e02d      	b.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f8ce 	bl	8003328 <I2C_IsAcknowledgeFailed>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e02d      	b.n	80031f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d021      	beq.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319e:	f7fe fb31 	bl	8001804 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d302      	bcc.n	80031b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d116      	bne.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f043 0220 	orr.w	r2, r3, #32
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e007      	b.n	80031f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	2b80      	cmp	r3, #128	; 0x80
 80031ee:	d1ca      	bne.n	8003186 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003206:	e02d      	b.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f88d 	bl	8003328 <I2C_IsAcknowledgeFailed>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e02d      	b.n	8003274 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321e:	d021      	beq.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003220:	f7fe faf0 	bl	8001804 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	429a      	cmp	r2, r3
 800322e:	d302      	bcc.n	8003236 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d116      	bne.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f043 0220 	orr.w	r2, r3, #32
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e007      	b.n	8003274 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b04      	cmp	r3, #4
 8003270:	d1ca      	bne.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003288:	e042      	b.n	8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b10      	cmp	r3, #16
 8003296:	d119      	bne.n	80032cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0210 	mvn.w	r2, #16
 80032a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e029      	b.n	8003320 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032cc:	f7fe fa9a 	bl	8001804 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d302      	bcc.n	80032e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d116      	bne.n	8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e007      	b.n	8003320 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d1b5      	bne.n	800328a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333e:	d11b      	bne.n	8003378 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003348:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	f043 0204 	orr.w	r2, r3, #4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e25b      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d075      	beq.n	8003492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033a6:	4ba3      	ldr	r3, [pc, #652]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d00c      	beq.n	80033cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b2:	4ba0      	ldr	r3, [pc, #640]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d112      	bne.n	80033e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033be:	4b9d      	ldr	r3, [pc, #628]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ca:	d10b      	bne.n	80033e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	4b99      	ldr	r3, [pc, #612]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d05b      	beq.n	8003490 <HAL_RCC_OscConfig+0x108>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d157      	bne.n	8003490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e236      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ec:	d106      	bne.n	80033fc <HAL_RCC_OscConfig+0x74>
 80033ee:	4b91      	ldr	r3, [pc, #580]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a90      	ldr	r2, [pc, #576]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e01d      	b.n	8003438 <HAL_RCC_OscConfig+0xb0>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x98>
 8003406:	4b8b      	ldr	r3, [pc, #556]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a8a      	ldr	r2, [pc, #552]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800340c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b88      	ldr	r3, [pc, #544]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a87      	ldr	r2, [pc, #540]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e00b      	b.n	8003438 <HAL_RCC_OscConfig+0xb0>
 8003420:	4b84      	ldr	r3, [pc, #528]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a83      	ldr	r2, [pc, #524]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	4b81      	ldr	r3, [pc, #516]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a80      	ldr	r2, [pc, #512]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d013      	beq.n	8003468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fe f9e0 	bl	8001804 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003448:	f7fe f9dc 	bl	8001804 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e1fb      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b76      	ldr	r3, [pc, #472]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0xc0>
 8003466:	e014      	b.n	8003492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fe f9cc 	bl	8001804 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003470:	f7fe f9c8 	bl	8001804 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e1e7      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003482:	4b6c      	ldr	r3, [pc, #432]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0xe8>
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d063      	beq.n	8003566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800349e:	4b65      	ldr	r3, [pc, #404]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034aa:	4b62      	ldr	r3, [pc, #392]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d11c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b6:	4b5f      	ldr	r3, [pc, #380]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d116      	bne.n	80034f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c2:	4b5c      	ldr	r3, [pc, #368]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_RCC_OscConfig+0x152>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d001      	beq.n	80034da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e1bb      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034da:	4b56      	ldr	r3, [pc, #344]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4952      	ldr	r1, [pc, #328]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ee:	e03a      	b.n	8003566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f8:	4b4f      	ldr	r3, [pc, #316]	; (8003638 <HAL_RCC_OscConfig+0x2b0>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7fe f981 	bl	8001804 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003506:	f7fe f97d 	bl	8001804 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e19c      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003518:	4b46      	ldr	r3, [pc, #280]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	4b43      	ldr	r3, [pc, #268]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4940      	ldr	r1, [pc, #256]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]
 8003538:	e015      	b.n	8003566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353a:	4b3f      	ldr	r3, [pc, #252]	; (8003638 <HAL_RCC_OscConfig+0x2b0>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fe f960 	bl	8001804 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003548:	f7fe f95c 	bl	8001804 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e17b      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	4b36      	ldr	r3, [pc, #216]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d030      	beq.n	80035d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d016      	beq.n	80035a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357a:	4b30      	ldr	r3, [pc, #192]	; (800363c <HAL_RCC_OscConfig+0x2b4>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003580:	f7fe f940 	bl	8001804 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003588:	f7fe f93c 	bl	8001804 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e15b      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359a:	4b26      	ldr	r3, [pc, #152]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x200>
 80035a6:	e015      	b.n	80035d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_RCC_OscConfig+0x2b4>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ae:	f7fe f929 	bl	8001804 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b6:	f7fe f925 	bl	8001804 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e144      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c8:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80035ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f0      	bne.n	80035b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80a0 	beq.w	8003722 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e2:	2300      	movs	r3, #0
 80035e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10f      	bne.n	8003612 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	4a0e      	ldr	r2, [pc, #56]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003600:	6413      	str	r3, [r2, #64]	; 0x40
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_OscConfig+0x2b8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d121      	bne.n	8003662 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <HAL_RCC_OscConfig+0x2b8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a07      	ldr	r2, [pc, #28]	; (8003640 <HAL_RCC_OscConfig+0x2b8>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362a:	f7fe f8eb 	bl	8001804 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	e011      	b.n	8003656 <HAL_RCC_OscConfig+0x2ce>
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	42470000 	.word	0x42470000
 800363c:	42470e80 	.word	0x42470e80
 8003640:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003644:	f7fe f8de 	bl	8001804 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e0fd      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003656:	4b81      	ldr	r3, [pc, #516]	; (800385c <HAL_RCC_OscConfig+0x4d4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d106      	bne.n	8003678 <HAL_RCC_OscConfig+0x2f0>
 800366a:	4b7d      	ldr	r3, [pc, #500]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a7c      	ldr	r2, [pc, #496]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
 8003676:	e01c      	b.n	80036b2 <HAL_RCC_OscConfig+0x32a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b05      	cmp	r3, #5
 800367e:	d10c      	bne.n	800369a <HAL_RCC_OscConfig+0x312>
 8003680:	4b77      	ldr	r3, [pc, #476]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	4a76      	ldr	r2, [pc, #472]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	6713      	str	r3, [r2, #112]	; 0x70
 800368c:	4b74      	ldr	r3, [pc, #464]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a73      	ldr	r2, [pc, #460]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
 8003698:	e00b      	b.n	80036b2 <HAL_RCC_OscConfig+0x32a>
 800369a:	4b71      	ldr	r3, [pc, #452]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	4a70      	ldr	r2, [pc, #448]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	6713      	str	r3, [r2, #112]	; 0x70
 80036a6:	4b6e      	ldr	r3, [pc, #440]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a6d      	ldr	r2, [pc, #436]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 80036ac:	f023 0304 	bic.w	r3, r3, #4
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d015      	beq.n	80036e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fe f8a3 	bl	8001804 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fe f89f 	bl	8001804 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e0bc      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	4b61      	ldr	r3, [pc, #388]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ee      	beq.n	80036c2 <HAL_RCC_OscConfig+0x33a>
 80036e4:	e014      	b.n	8003710 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e6:	f7fe f88d 	bl	8001804 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fe f889 	bl	8001804 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e0a6      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003704:	4b56      	ldr	r3, [pc, #344]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ee      	bne.n	80036ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003710:	7dfb      	ldrb	r3, [r7, #23]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d105      	bne.n	8003722 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003716:	4b52      	ldr	r3, [pc, #328]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	4a51      	ldr	r2, [pc, #324]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 800371c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003720:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8092 	beq.w	8003850 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800372c:	4b4c      	ldr	r3, [pc, #304]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 030c 	and.w	r3, r3, #12
 8003734:	2b08      	cmp	r3, #8
 8003736:	d05c      	beq.n	80037f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d141      	bne.n	80037c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003740:	4b48      	ldr	r3, [pc, #288]	; (8003864 <HAL_RCC_OscConfig+0x4dc>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fe f85d 	bl	8001804 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374e:	f7fe f859 	bl	8001804 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e078      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003760:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f0      	bne.n	800374e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	019b      	lsls	r3, r3, #6
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	3b01      	subs	r3, #1
 8003786:	041b      	lsls	r3, r3, #16
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	061b      	lsls	r3, r3, #24
 8003790:	4933      	ldr	r1, [pc, #204]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003796:	4b33      	ldr	r3, [pc, #204]	; (8003864 <HAL_RCC_OscConfig+0x4dc>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fe f832 	bl	8001804 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fe f82e 	bl	8001804 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e04d      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b6:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0x41c>
 80037c2:	e045      	b.n	8003850 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_RCC_OscConfig+0x4dc>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7fe f81b 	bl	8001804 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d2:	f7fe f817 	bl	8001804 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e036      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e4:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f0      	bne.n	80037d2 <HAL_RCC_OscConfig+0x44a>
 80037f0:	e02e      	b.n	8003850 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e029      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037fe:	4b18      	ldr	r3, [pc, #96]	; (8003860 <HAL_RCC_OscConfig+0x4d8>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	429a      	cmp	r2, r3
 8003810:	d11c      	bne.n	800384c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d115      	bne.n	800384c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003826:	4013      	ands	r3, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800382c:	4293      	cmp	r3, r2
 800382e:	d10d      	bne.n	800384c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d106      	bne.n	800384c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40007000 	.word	0x40007000
 8003860:	40023800 	.word	0x40023800
 8003864:	42470060 	.word	0x42470060

08003868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0cc      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800387c:	4b68      	ldr	r3, [pc, #416]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d90c      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b65      	ldr	r3, [pc, #404]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a58      	ldr	r2, [pc, #352]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d044      	beq.n	8003988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d119      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d003      	beq.n	8003926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003922:	2b03      	cmp	r3, #3
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b3f      	ldr	r3, [pc, #252]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e06f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003936:	4b3b      	ldr	r3, [pc, #236]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e067      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003946:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4934      	ldr	r1, [pc, #208]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	4313      	orrs	r3, r2
 8003956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003958:	f7fd ff54 	bl	8001804 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7fd ff50 	bl	8001804 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e04f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 020c 	and.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d1eb      	bne.n	8003960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b25      	ldr	r3, [pc, #148]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d20c      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f821 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039f2:	4601      	mov	r1, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 8003a00:	5cd3      	ldrb	r3, [r2, r3]
 8003a02:	fa21 f303 	lsr.w	r3, r1, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fd feb4 	bl	800177c <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023c00 	.word	0x40023c00
 8003a24:	40023800 	.word	0x40023800
 8003a28:	08004fec 	.word	0x08004fec
 8003a2c:	20000004 	.word	0x20000004
 8003a30:	20000008 	.word	0x20000008

08003a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	2300      	movs	r3, #0
 8003a44:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a4a:	4b50      	ldr	r3, [pc, #320]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d007      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x32>
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d008      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x38>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f040 808d 	bne.w	8003b7a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a60:	4b4b      	ldr	r3, [pc, #300]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a62:	60bb      	str	r3, [r7, #8]
       break;
 8003a64:	e08c      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a66:	4b4b      	ldr	r3, [pc, #300]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a68:	60bb      	str	r3, [r7, #8]
      break;
 8003a6a:	e089      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a6c:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a76:	4b45      	ldr	r3, [pc, #276]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d023      	beq.n	8003aca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a82:	4b42      	ldr	r3, [pc, #264]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	099b      	lsrs	r3, r3, #6
 8003a88:	f04f 0400 	mov.w	r4, #0
 8003a8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	ea03 0501 	and.w	r5, r3, r1
 8003a98:	ea04 0602 	and.w	r6, r4, r2
 8003a9c:	4a3d      	ldr	r2, [pc, #244]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a9e:	fb02 f106 	mul.w	r1, r2, r6
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	fb02 f205 	mul.w	r2, r2, r5
 8003aa8:	440a      	add	r2, r1
 8003aaa:	493a      	ldr	r1, [pc, #232]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8003aac:	fba5 0101 	umull	r0, r1, r5, r1
 8003ab0:	1853      	adds	r3, r2, r1
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f04f 0400 	mov.w	r4, #0
 8003aba:	461a      	mov	r2, r3
 8003abc:	4623      	mov	r3, r4
 8003abe:	f7fc fb8b 	bl	80001d8 <__aeabi_uldivmod>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e049      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aca:	4b30      	ldr	r3, [pc, #192]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	099b      	lsrs	r3, r3, #6
 8003ad0:	f04f 0400 	mov.w	r4, #0
 8003ad4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	ea03 0501 	and.w	r5, r3, r1
 8003ae0:	ea04 0602 	and.w	r6, r4, r2
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	4632      	mov	r2, r6
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	f04f 0400 	mov.w	r4, #0
 8003af0:	0154      	lsls	r4, r2, #5
 8003af2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003af6:	014b      	lsls	r3, r1, #5
 8003af8:	4619      	mov	r1, r3
 8003afa:	4622      	mov	r2, r4
 8003afc:	1b49      	subs	r1, r1, r5
 8003afe:	eb62 0206 	sbc.w	r2, r2, r6
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	f04f 0400 	mov.w	r4, #0
 8003b0a:	0194      	lsls	r4, r2, #6
 8003b0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b10:	018b      	lsls	r3, r1, #6
 8003b12:	1a5b      	subs	r3, r3, r1
 8003b14:	eb64 0402 	sbc.w	r4, r4, r2
 8003b18:	f04f 0100 	mov.w	r1, #0
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	00e2      	lsls	r2, r4, #3
 8003b22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b26:	00d9      	lsls	r1, r3, #3
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4614      	mov	r4, r2
 8003b2c:	195b      	adds	r3, r3, r5
 8003b2e:	eb44 0406 	adc.w	r4, r4, r6
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	02a2      	lsls	r2, r4, #10
 8003b3c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b40:	0299      	lsls	r1, r3, #10
 8003b42:	460b      	mov	r3, r1
 8003b44:	4614      	mov	r4, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	4621      	mov	r1, r4
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f04f 0400 	mov.w	r4, #0
 8003b50:	461a      	mov	r2, r3
 8003b52:	4623      	mov	r3, r4
 8003b54:	f7fc fb40 	bl	80001d8 <__aeabi_uldivmod>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	0c1b      	lsrs	r3, r3, #16
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	3301      	adds	r3, #1
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	60bb      	str	r3, [r7, #8]
      break;
 8003b78:	e002      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b7a:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b7c:	60bb      	str	r3, [r7, #8]
      break;
 8003b7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b80:	68bb      	ldr	r3, [r7, #8]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	00f42400 	.word	0x00f42400
 8003b94:	017d7840 	.word	0x017d7840

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000004 	.word	0x20000004

08003bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bb4:	f7ff fff0 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4601      	mov	r1, r0
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0a9b      	lsrs	r3, r3, #10
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4a03      	ldr	r2, [pc, #12]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc6:	5cd3      	ldrb	r3, [r2, r3]
 8003bc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	08004ffc 	.word	0x08004ffc

08003bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bdc:	f7ff ffdc 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003be0:	4601      	mov	r1, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0b5b      	lsrs	r3, r3, #13
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4a03      	ldr	r2, [pc, #12]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bee:	5cd3      	ldrb	r3, [r2, r3]
 8003bf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	08004ffc 	.word	0x08004ffc

08003c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e03f      	b.n	8003c92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd fb10 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2224      	movs	r2, #36	; 0x24
 8003c30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f97d 	bl	8003f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	d166      	bne.n	8003d84 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_UART_Receive_DMA+0x26>
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e05f      	b.n	8003d86 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_UART_Receive_DMA+0x38>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e058      	b.n	8003d86 <HAL_UART_Receive_DMA+0xea>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	88fa      	ldrh	r2, [r7, #6]
 8003ce6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2222      	movs	r2, #34	; 0x22
 8003cf2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	4a25      	ldr	r2, [pc, #148]	; (8003d90 <HAL_UART_Receive_DMA+0xf4>)
 8003cfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d02:	4a24      	ldr	r2, [pc, #144]	; (8003d94 <HAL_UART_Receive_DMA+0xf8>)
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0a:	4a23      	ldr	r2, [pc, #140]	; (8003d98 <HAL_UART_Receive_DMA+0xfc>)
 8003d0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d12:	2200      	movs	r2, #0
 8003d14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003d16:	f107 0308 	add.w	r3, r7, #8
 8003d1a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3304      	adds	r3, #4
 8003d26:	4619      	mov	r1, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	f7fd ff61 	bl	8001bf4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d7e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e000      	b.n	8003d86 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
  }
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	08003dc5 	.word	0x08003dc5
 8003d94:	08003e2d 	.word	0x08003e2d
 8003d98:	08003e49 	.word	0x08003e49

08003d9c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d11e      	bne.n	8003e1e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003df4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0201 	bic.w	r2, r2, #1
 8003e04:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e14:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f7fd f928 	bl	8001074 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f7ff ffae 	bl	8003d9c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e40:	bf00      	nop
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e64:	2b80      	cmp	r3, #128	; 0x80
 8003e66:	bf0c      	ite	eq
 8003e68:	2301      	moveq	r3, #1
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b21      	cmp	r3, #33	; 0x21
 8003e7a:	d108      	bne.n	8003e8e <UART_DMAError+0x46>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2200      	movs	r2, #0
 8003e86:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e88:	68b8      	ldr	r0, [r7, #8]
 8003e8a:	f000 f827 	bl	8003edc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b22      	cmp	r3, #34	; 0x22
 8003eae:	d108      	bne.n	8003ec2 <UART_DMAError+0x7a>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003ebc:	68b8      	ldr	r0, [r7, #8]
 8003ebe:	f000 f823 	bl	8003f08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	f043 0210 	orr.w	r2, r3, #16
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ece:	68b8      	ldr	r0, [r7, #8]
 8003ed0:	f7ff ff6e 	bl	8003db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003ef2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f86:	f023 030c 	bic.w	r3, r3, #12
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	68f9      	ldr	r1, [r7, #12]
 8003f90:	430b      	orrs	r3, r1
 8003f92:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb2:	f040 818b 	bne.w	80042cc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4ac1      	ldr	r2, [pc, #772]	; (80042c0 <UART_SetConfig+0x37c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d005      	beq.n	8003fcc <UART_SetConfig+0x88>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4abf      	ldr	r2, [pc, #764]	; (80042c4 <UART_SetConfig+0x380>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	f040 80bd 	bne.w	8004146 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fcc:	f7ff fe04 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 8003fd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	461d      	mov	r5, r3
 8003fd6:	f04f 0600 	mov.w	r6, #0
 8003fda:	46a8      	mov	r8, r5
 8003fdc:	46b1      	mov	r9, r6
 8003fde:	eb18 0308 	adds.w	r3, r8, r8
 8003fe2:	eb49 0409 	adc.w	r4, r9, r9
 8003fe6:	4698      	mov	r8, r3
 8003fe8:	46a1      	mov	r9, r4
 8003fea:	eb18 0805 	adds.w	r8, r8, r5
 8003fee:	eb49 0906 	adc.w	r9, r9, r6
 8003ff2:	f04f 0100 	mov.w	r1, #0
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ffe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004002:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004006:	4688      	mov	r8, r1
 8004008:	4691      	mov	r9, r2
 800400a:	eb18 0005 	adds.w	r0, r8, r5
 800400e:	eb49 0106 	adc.w	r1, r9, r6
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	461d      	mov	r5, r3
 8004018:	f04f 0600 	mov.w	r6, #0
 800401c:	196b      	adds	r3, r5, r5
 800401e:	eb46 0406 	adc.w	r4, r6, r6
 8004022:	461a      	mov	r2, r3
 8004024:	4623      	mov	r3, r4
 8004026:	f7fc f8d7 	bl	80001d8 <__aeabi_uldivmod>
 800402a:	4603      	mov	r3, r0
 800402c:	460c      	mov	r4, r1
 800402e:	461a      	mov	r2, r3
 8004030:	4ba5      	ldr	r3, [pc, #660]	; (80042c8 <UART_SetConfig+0x384>)
 8004032:	fba3 2302 	umull	r2, r3, r3, r2
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	461d      	mov	r5, r3
 8004040:	f04f 0600 	mov.w	r6, #0
 8004044:	46a9      	mov	r9, r5
 8004046:	46b2      	mov	sl, r6
 8004048:	eb19 0309 	adds.w	r3, r9, r9
 800404c:	eb4a 040a 	adc.w	r4, sl, sl
 8004050:	4699      	mov	r9, r3
 8004052:	46a2      	mov	sl, r4
 8004054:	eb19 0905 	adds.w	r9, r9, r5
 8004058:	eb4a 0a06 	adc.w	sl, sl, r6
 800405c:	f04f 0100 	mov.w	r1, #0
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004068:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800406c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004070:	4689      	mov	r9, r1
 8004072:	4692      	mov	sl, r2
 8004074:	eb19 0005 	adds.w	r0, r9, r5
 8004078:	eb4a 0106 	adc.w	r1, sl, r6
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	461d      	mov	r5, r3
 8004082:	f04f 0600 	mov.w	r6, #0
 8004086:	196b      	adds	r3, r5, r5
 8004088:	eb46 0406 	adc.w	r4, r6, r6
 800408c:	461a      	mov	r2, r3
 800408e:	4623      	mov	r3, r4
 8004090:	f7fc f8a2 	bl	80001d8 <__aeabi_uldivmod>
 8004094:	4603      	mov	r3, r0
 8004096:	460c      	mov	r4, r1
 8004098:	461a      	mov	r2, r3
 800409a:	4b8b      	ldr	r3, [pc, #556]	; (80042c8 <UART_SetConfig+0x384>)
 800409c:	fba3 1302 	umull	r1, r3, r3, r2
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	2164      	movs	r1, #100	; 0x64
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	3332      	adds	r3, #50	; 0x32
 80040ae:	4a86      	ldr	r2, [pc, #536]	; (80042c8 <UART_SetConfig+0x384>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040bc:	4498      	add	r8, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	461d      	mov	r5, r3
 80040c2:	f04f 0600 	mov.w	r6, #0
 80040c6:	46a9      	mov	r9, r5
 80040c8:	46b2      	mov	sl, r6
 80040ca:	eb19 0309 	adds.w	r3, r9, r9
 80040ce:	eb4a 040a 	adc.w	r4, sl, sl
 80040d2:	4699      	mov	r9, r3
 80040d4:	46a2      	mov	sl, r4
 80040d6:	eb19 0905 	adds.w	r9, r9, r5
 80040da:	eb4a 0a06 	adc.w	sl, sl, r6
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040f2:	4689      	mov	r9, r1
 80040f4:	4692      	mov	sl, r2
 80040f6:	eb19 0005 	adds.w	r0, r9, r5
 80040fa:	eb4a 0106 	adc.w	r1, sl, r6
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	461d      	mov	r5, r3
 8004104:	f04f 0600 	mov.w	r6, #0
 8004108:	196b      	adds	r3, r5, r5
 800410a:	eb46 0406 	adc.w	r4, r6, r6
 800410e:	461a      	mov	r2, r3
 8004110:	4623      	mov	r3, r4
 8004112:	f7fc f861 	bl	80001d8 <__aeabi_uldivmod>
 8004116:	4603      	mov	r3, r0
 8004118:	460c      	mov	r4, r1
 800411a:	461a      	mov	r2, r3
 800411c:	4b6a      	ldr	r3, [pc, #424]	; (80042c8 <UART_SetConfig+0x384>)
 800411e:	fba3 1302 	umull	r1, r3, r3, r2
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	2164      	movs	r1, #100	; 0x64
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	3332      	adds	r3, #50	; 0x32
 8004130:	4a65      	ldr	r2, [pc, #404]	; (80042c8 <UART_SetConfig+0x384>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	f003 0207 	and.w	r2, r3, #7
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4442      	add	r2, r8
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	e26f      	b.n	8004626 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004146:	f7ff fd33 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 800414a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	461d      	mov	r5, r3
 8004150:	f04f 0600 	mov.w	r6, #0
 8004154:	46a8      	mov	r8, r5
 8004156:	46b1      	mov	r9, r6
 8004158:	eb18 0308 	adds.w	r3, r8, r8
 800415c:	eb49 0409 	adc.w	r4, r9, r9
 8004160:	4698      	mov	r8, r3
 8004162:	46a1      	mov	r9, r4
 8004164:	eb18 0805 	adds.w	r8, r8, r5
 8004168:	eb49 0906 	adc.w	r9, r9, r6
 800416c:	f04f 0100 	mov.w	r1, #0
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004178:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800417c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004180:	4688      	mov	r8, r1
 8004182:	4691      	mov	r9, r2
 8004184:	eb18 0005 	adds.w	r0, r8, r5
 8004188:	eb49 0106 	adc.w	r1, r9, r6
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	461d      	mov	r5, r3
 8004192:	f04f 0600 	mov.w	r6, #0
 8004196:	196b      	adds	r3, r5, r5
 8004198:	eb46 0406 	adc.w	r4, r6, r6
 800419c:	461a      	mov	r2, r3
 800419e:	4623      	mov	r3, r4
 80041a0:	f7fc f81a 	bl	80001d8 <__aeabi_uldivmod>
 80041a4:	4603      	mov	r3, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	461a      	mov	r2, r3
 80041aa:	4b47      	ldr	r3, [pc, #284]	; (80042c8 <UART_SetConfig+0x384>)
 80041ac:	fba3 2302 	umull	r2, r3, r3, r2
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	461d      	mov	r5, r3
 80041ba:	f04f 0600 	mov.w	r6, #0
 80041be:	46a9      	mov	r9, r5
 80041c0:	46b2      	mov	sl, r6
 80041c2:	eb19 0309 	adds.w	r3, r9, r9
 80041c6:	eb4a 040a 	adc.w	r4, sl, sl
 80041ca:	4699      	mov	r9, r3
 80041cc:	46a2      	mov	sl, r4
 80041ce:	eb19 0905 	adds.w	r9, r9, r5
 80041d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80041d6:	f04f 0100 	mov.w	r1, #0
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041ea:	4689      	mov	r9, r1
 80041ec:	4692      	mov	sl, r2
 80041ee:	eb19 0005 	adds.w	r0, r9, r5
 80041f2:	eb4a 0106 	adc.w	r1, sl, r6
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	461d      	mov	r5, r3
 80041fc:	f04f 0600 	mov.w	r6, #0
 8004200:	196b      	adds	r3, r5, r5
 8004202:	eb46 0406 	adc.w	r4, r6, r6
 8004206:	461a      	mov	r2, r3
 8004208:	4623      	mov	r3, r4
 800420a:	f7fb ffe5 	bl	80001d8 <__aeabi_uldivmod>
 800420e:	4603      	mov	r3, r0
 8004210:	460c      	mov	r4, r1
 8004212:	461a      	mov	r2, r3
 8004214:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <UART_SetConfig+0x384>)
 8004216:	fba3 1302 	umull	r1, r3, r3, r2
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	2164      	movs	r1, #100	; 0x64
 800421e:	fb01 f303 	mul.w	r3, r1, r3
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	3332      	adds	r3, #50	; 0x32
 8004228:	4a27      	ldr	r2, [pc, #156]	; (80042c8 <UART_SetConfig+0x384>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004236:	4498      	add	r8, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	461d      	mov	r5, r3
 800423c:	f04f 0600 	mov.w	r6, #0
 8004240:	46a9      	mov	r9, r5
 8004242:	46b2      	mov	sl, r6
 8004244:	eb19 0309 	adds.w	r3, r9, r9
 8004248:	eb4a 040a 	adc.w	r4, sl, sl
 800424c:	4699      	mov	r9, r3
 800424e:	46a2      	mov	sl, r4
 8004250:	eb19 0905 	adds.w	r9, r9, r5
 8004254:	eb4a 0a06 	adc.w	sl, sl, r6
 8004258:	f04f 0100 	mov.w	r1, #0
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004264:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004268:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800426c:	4689      	mov	r9, r1
 800426e:	4692      	mov	sl, r2
 8004270:	eb19 0005 	adds.w	r0, r9, r5
 8004274:	eb4a 0106 	adc.w	r1, sl, r6
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	461d      	mov	r5, r3
 800427e:	f04f 0600 	mov.w	r6, #0
 8004282:	196b      	adds	r3, r5, r5
 8004284:	eb46 0406 	adc.w	r4, r6, r6
 8004288:	461a      	mov	r2, r3
 800428a:	4623      	mov	r3, r4
 800428c:	f7fb ffa4 	bl	80001d8 <__aeabi_uldivmod>
 8004290:	4603      	mov	r3, r0
 8004292:	460c      	mov	r4, r1
 8004294:	461a      	mov	r2, r3
 8004296:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <UART_SetConfig+0x384>)
 8004298:	fba3 1302 	umull	r1, r3, r3, r2
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	2164      	movs	r1, #100	; 0x64
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	3332      	adds	r3, #50	; 0x32
 80042aa:	4a07      	ldr	r2, [pc, #28]	; (80042c8 <UART_SetConfig+0x384>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	f003 0207 	and.w	r2, r3, #7
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4442      	add	r2, r8
 80042bc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80042be:	e1b2      	b.n	8004626 <UART_SetConfig+0x6e2>
 80042c0:	40011000 	.word	0x40011000
 80042c4:	40011400 	.word	0x40011400
 80042c8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4ad7      	ldr	r2, [pc, #860]	; (8004630 <UART_SetConfig+0x6ec>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d005      	beq.n	80042e2 <UART_SetConfig+0x39e>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4ad6      	ldr	r2, [pc, #856]	; (8004634 <UART_SetConfig+0x6f0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	f040 80d1 	bne.w	8004484 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80042e2:	f7ff fc79 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 80042e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	469a      	mov	sl, r3
 80042ec:	f04f 0b00 	mov.w	fp, #0
 80042f0:	46d0      	mov	r8, sl
 80042f2:	46d9      	mov	r9, fp
 80042f4:	eb18 0308 	adds.w	r3, r8, r8
 80042f8:	eb49 0409 	adc.w	r4, r9, r9
 80042fc:	4698      	mov	r8, r3
 80042fe:	46a1      	mov	r9, r4
 8004300:	eb18 080a 	adds.w	r8, r8, sl
 8004304:	eb49 090b 	adc.w	r9, r9, fp
 8004308:	f04f 0100 	mov.w	r1, #0
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004314:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004318:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800431c:	4688      	mov	r8, r1
 800431e:	4691      	mov	r9, r2
 8004320:	eb1a 0508 	adds.w	r5, sl, r8
 8004324:	eb4b 0609 	adc.w	r6, fp, r9
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	4619      	mov	r1, r3
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	f04f 0400 	mov.w	r4, #0
 800433a:	0094      	lsls	r4, r2, #2
 800433c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004340:	008b      	lsls	r3, r1, #2
 8004342:	461a      	mov	r2, r3
 8004344:	4623      	mov	r3, r4
 8004346:	4628      	mov	r0, r5
 8004348:	4631      	mov	r1, r6
 800434a:	f7fb ff45 	bl	80001d8 <__aeabi_uldivmod>
 800434e:	4603      	mov	r3, r0
 8004350:	460c      	mov	r4, r1
 8004352:	461a      	mov	r2, r3
 8004354:	4bb8      	ldr	r3, [pc, #736]	; (8004638 <UART_SetConfig+0x6f4>)
 8004356:	fba3 2302 	umull	r2, r3, r3, r2
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	469b      	mov	fp, r3
 8004364:	f04f 0c00 	mov.w	ip, #0
 8004368:	46d9      	mov	r9, fp
 800436a:	46e2      	mov	sl, ip
 800436c:	eb19 0309 	adds.w	r3, r9, r9
 8004370:	eb4a 040a 	adc.w	r4, sl, sl
 8004374:	4699      	mov	r9, r3
 8004376:	46a2      	mov	sl, r4
 8004378:	eb19 090b 	adds.w	r9, r9, fp
 800437c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004380:	f04f 0100 	mov.w	r1, #0
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800438c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004390:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004394:	4689      	mov	r9, r1
 8004396:	4692      	mov	sl, r2
 8004398:	eb1b 0509 	adds.w	r5, fp, r9
 800439c:	eb4c 060a 	adc.w	r6, ip, sl
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4619      	mov	r1, r3
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	f04f 0400 	mov.w	r4, #0
 80043b2:	0094      	lsls	r4, r2, #2
 80043b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043b8:	008b      	lsls	r3, r1, #2
 80043ba:	461a      	mov	r2, r3
 80043bc:	4623      	mov	r3, r4
 80043be:	4628      	mov	r0, r5
 80043c0:	4631      	mov	r1, r6
 80043c2:	f7fb ff09 	bl	80001d8 <__aeabi_uldivmod>
 80043c6:	4603      	mov	r3, r0
 80043c8:	460c      	mov	r4, r1
 80043ca:	461a      	mov	r2, r3
 80043cc:	4b9a      	ldr	r3, [pc, #616]	; (8004638 <UART_SetConfig+0x6f4>)
 80043ce:	fba3 1302 	umull	r1, r3, r3, r2
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	2164      	movs	r1, #100	; 0x64
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	3332      	adds	r3, #50	; 0x32
 80043e0:	4a95      	ldr	r2, [pc, #596]	; (8004638 <UART_SetConfig+0x6f4>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ec:	4498      	add	r8, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	469b      	mov	fp, r3
 80043f2:	f04f 0c00 	mov.w	ip, #0
 80043f6:	46d9      	mov	r9, fp
 80043f8:	46e2      	mov	sl, ip
 80043fa:	eb19 0309 	adds.w	r3, r9, r9
 80043fe:	eb4a 040a 	adc.w	r4, sl, sl
 8004402:	4699      	mov	r9, r3
 8004404:	46a2      	mov	sl, r4
 8004406:	eb19 090b 	adds.w	r9, r9, fp
 800440a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800440e:	f04f 0100 	mov.w	r1, #0
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800441a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800441e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004422:	4689      	mov	r9, r1
 8004424:	4692      	mov	sl, r2
 8004426:	eb1b 0509 	adds.w	r5, fp, r9
 800442a:	eb4c 060a 	adc.w	r6, ip, sl
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4619      	mov	r1, r3
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	f04f 0400 	mov.w	r4, #0
 8004440:	0094      	lsls	r4, r2, #2
 8004442:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004446:	008b      	lsls	r3, r1, #2
 8004448:	461a      	mov	r2, r3
 800444a:	4623      	mov	r3, r4
 800444c:	4628      	mov	r0, r5
 800444e:	4631      	mov	r1, r6
 8004450:	f7fb fec2 	bl	80001d8 <__aeabi_uldivmod>
 8004454:	4603      	mov	r3, r0
 8004456:	460c      	mov	r4, r1
 8004458:	461a      	mov	r2, r3
 800445a:	4b77      	ldr	r3, [pc, #476]	; (8004638 <UART_SetConfig+0x6f4>)
 800445c:	fba3 1302 	umull	r1, r3, r3, r2
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	2164      	movs	r1, #100	; 0x64
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	3332      	adds	r3, #50	; 0x32
 800446e:	4a72      	ldr	r2, [pc, #456]	; (8004638 <UART_SetConfig+0x6f4>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	f003 020f 	and.w	r2, r3, #15
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4442      	add	r2, r8
 8004480:	609a      	str	r2, [r3, #8]
 8004482:	e0d0      	b.n	8004626 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004484:	f7ff fb94 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 8004488:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	469a      	mov	sl, r3
 800448e:	f04f 0b00 	mov.w	fp, #0
 8004492:	46d0      	mov	r8, sl
 8004494:	46d9      	mov	r9, fp
 8004496:	eb18 0308 	adds.w	r3, r8, r8
 800449a:	eb49 0409 	adc.w	r4, r9, r9
 800449e:	4698      	mov	r8, r3
 80044a0:	46a1      	mov	r9, r4
 80044a2:	eb18 080a 	adds.w	r8, r8, sl
 80044a6:	eb49 090b 	adc.w	r9, r9, fp
 80044aa:	f04f 0100 	mov.w	r1, #0
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044be:	4688      	mov	r8, r1
 80044c0:	4691      	mov	r9, r2
 80044c2:	eb1a 0508 	adds.w	r5, sl, r8
 80044c6:	eb4b 0609 	adc.w	r6, fp, r9
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	4619      	mov	r1, r3
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	f04f 0400 	mov.w	r4, #0
 80044dc:	0094      	lsls	r4, r2, #2
 80044de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044e2:	008b      	lsls	r3, r1, #2
 80044e4:	461a      	mov	r2, r3
 80044e6:	4623      	mov	r3, r4
 80044e8:	4628      	mov	r0, r5
 80044ea:	4631      	mov	r1, r6
 80044ec:	f7fb fe74 	bl	80001d8 <__aeabi_uldivmod>
 80044f0:	4603      	mov	r3, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	461a      	mov	r2, r3
 80044f6:	4b50      	ldr	r3, [pc, #320]	; (8004638 <UART_SetConfig+0x6f4>)
 80044f8:	fba3 2302 	umull	r2, r3, r3, r2
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	469b      	mov	fp, r3
 8004506:	f04f 0c00 	mov.w	ip, #0
 800450a:	46d9      	mov	r9, fp
 800450c:	46e2      	mov	sl, ip
 800450e:	eb19 0309 	adds.w	r3, r9, r9
 8004512:	eb4a 040a 	adc.w	r4, sl, sl
 8004516:	4699      	mov	r9, r3
 8004518:	46a2      	mov	sl, r4
 800451a:	eb19 090b 	adds.w	r9, r9, fp
 800451e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800452e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004532:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004536:	4689      	mov	r9, r1
 8004538:	4692      	mov	sl, r2
 800453a:	eb1b 0509 	adds.w	r5, fp, r9
 800453e:	eb4c 060a 	adc.w	r6, ip, sl
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4619      	mov	r1, r3
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	f04f 0400 	mov.w	r4, #0
 8004554:	0094      	lsls	r4, r2, #2
 8004556:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800455a:	008b      	lsls	r3, r1, #2
 800455c:	461a      	mov	r2, r3
 800455e:	4623      	mov	r3, r4
 8004560:	4628      	mov	r0, r5
 8004562:	4631      	mov	r1, r6
 8004564:	f7fb fe38 	bl	80001d8 <__aeabi_uldivmod>
 8004568:	4603      	mov	r3, r0
 800456a:	460c      	mov	r4, r1
 800456c:	461a      	mov	r2, r3
 800456e:	4b32      	ldr	r3, [pc, #200]	; (8004638 <UART_SetConfig+0x6f4>)
 8004570:	fba3 1302 	umull	r1, r3, r3, r2
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	2164      	movs	r1, #100	; 0x64
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	3332      	adds	r3, #50	; 0x32
 8004582:	4a2d      	ldr	r2, [pc, #180]	; (8004638 <UART_SetConfig+0x6f4>)
 8004584:	fba2 2303 	umull	r2, r3, r2, r3
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800458e:	4498      	add	r8, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	469b      	mov	fp, r3
 8004594:	f04f 0c00 	mov.w	ip, #0
 8004598:	46d9      	mov	r9, fp
 800459a:	46e2      	mov	sl, ip
 800459c:	eb19 0309 	adds.w	r3, r9, r9
 80045a0:	eb4a 040a 	adc.w	r4, sl, sl
 80045a4:	4699      	mov	r9, r3
 80045a6:	46a2      	mov	sl, r4
 80045a8:	eb19 090b 	adds.w	r9, r9, fp
 80045ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045b0:	f04f 0100 	mov.w	r1, #0
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045c4:	4689      	mov	r9, r1
 80045c6:	4692      	mov	sl, r2
 80045c8:	eb1b 0509 	adds.w	r5, fp, r9
 80045cc:	eb4c 060a 	adc.w	r6, ip, sl
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	4619      	mov	r1, r3
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	f04f 0400 	mov.w	r4, #0
 80045e2:	0094      	lsls	r4, r2, #2
 80045e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045e8:	008b      	lsls	r3, r1, #2
 80045ea:	461a      	mov	r2, r3
 80045ec:	4623      	mov	r3, r4
 80045ee:	4628      	mov	r0, r5
 80045f0:	4631      	mov	r1, r6
 80045f2:	f7fb fdf1 	bl	80001d8 <__aeabi_uldivmod>
 80045f6:	4603      	mov	r3, r0
 80045f8:	460c      	mov	r4, r1
 80045fa:	461a      	mov	r2, r3
 80045fc:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <UART_SetConfig+0x6f4>)
 80045fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	2164      	movs	r1, #100	; 0x64
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	3332      	adds	r3, #50	; 0x32
 8004610:	4a09      	ldr	r2, [pc, #36]	; (8004638 <UART_SetConfig+0x6f4>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	f003 020f 	and.w	r2, r3, #15
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4442      	add	r2, r8
 8004622:	609a      	str	r2, [r3, #8]
}
 8004624:	e7ff      	b.n	8004626 <UART_SetConfig+0x6e2>
 8004626:	bf00      	nop
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004630:	40011000 	.word	0x40011000
 8004634:	40011400 	.word	0x40011400
 8004638:	51eb851f 	.word	0x51eb851f

0800463c <__errno>:
 800463c:	4b01      	ldr	r3, [pc, #4]	; (8004644 <__errno+0x8>)
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000010 	.word	0x20000010

08004648 <__libc_init_array>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	4e0d      	ldr	r6, [pc, #52]	; (8004680 <__libc_init_array+0x38>)
 800464c:	4c0d      	ldr	r4, [pc, #52]	; (8004684 <__libc_init_array+0x3c>)
 800464e:	1ba4      	subs	r4, r4, r6
 8004650:	10a4      	asrs	r4, r4, #2
 8004652:	2500      	movs	r5, #0
 8004654:	42a5      	cmp	r5, r4
 8004656:	d109      	bne.n	800466c <__libc_init_array+0x24>
 8004658:	4e0b      	ldr	r6, [pc, #44]	; (8004688 <__libc_init_array+0x40>)
 800465a:	4c0c      	ldr	r4, [pc, #48]	; (800468c <__libc_init_array+0x44>)
 800465c:	f000 fc88 	bl	8004f70 <_init>
 8004660:	1ba4      	subs	r4, r4, r6
 8004662:	10a4      	asrs	r4, r4, #2
 8004664:	2500      	movs	r5, #0
 8004666:	42a5      	cmp	r5, r4
 8004668:	d105      	bne.n	8004676 <__libc_init_array+0x2e>
 800466a:	bd70      	pop	{r4, r5, r6, pc}
 800466c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004670:	4798      	blx	r3
 8004672:	3501      	adds	r5, #1
 8004674:	e7ee      	b.n	8004654 <__libc_init_array+0xc>
 8004676:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800467a:	4798      	blx	r3
 800467c:	3501      	adds	r5, #1
 800467e:	e7f2      	b.n	8004666 <__libc_init_array+0x1e>
 8004680:	08005078 	.word	0x08005078
 8004684:	08005078 	.word	0x08005078
 8004688:	08005078 	.word	0x08005078
 800468c:	0800507c 	.word	0x0800507c

08004690 <memset>:
 8004690:	4402      	add	r2, r0
 8004692:	4603      	mov	r3, r0
 8004694:	4293      	cmp	r3, r2
 8004696:	d100      	bne.n	800469a <memset+0xa>
 8004698:	4770      	bx	lr
 800469a:	f803 1b01 	strb.w	r1, [r3], #1
 800469e:	e7f9      	b.n	8004694 <memset+0x4>

080046a0 <_puts_r>:
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	460e      	mov	r6, r1
 80046a4:	4605      	mov	r5, r0
 80046a6:	b118      	cbz	r0, 80046b0 <_puts_r+0x10>
 80046a8:	6983      	ldr	r3, [r0, #24]
 80046aa:	b90b      	cbnz	r3, 80046b0 <_puts_r+0x10>
 80046ac:	f000 fa0c 	bl	8004ac8 <__sinit>
 80046b0:	69ab      	ldr	r3, [r5, #24]
 80046b2:	68ac      	ldr	r4, [r5, #8]
 80046b4:	b913      	cbnz	r3, 80046bc <_puts_r+0x1c>
 80046b6:	4628      	mov	r0, r5
 80046b8:	f000 fa06 	bl	8004ac8 <__sinit>
 80046bc:	4b23      	ldr	r3, [pc, #140]	; (800474c <_puts_r+0xac>)
 80046be:	429c      	cmp	r4, r3
 80046c0:	d117      	bne.n	80046f2 <_puts_r+0x52>
 80046c2:	686c      	ldr	r4, [r5, #4]
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	071b      	lsls	r3, r3, #28
 80046c8:	d51d      	bpl.n	8004706 <_puts_r+0x66>
 80046ca:	6923      	ldr	r3, [r4, #16]
 80046cc:	b1db      	cbz	r3, 8004706 <_puts_r+0x66>
 80046ce:	3e01      	subs	r6, #1
 80046d0:	68a3      	ldr	r3, [r4, #8]
 80046d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046d6:	3b01      	subs	r3, #1
 80046d8:	60a3      	str	r3, [r4, #8]
 80046da:	b9e9      	cbnz	r1, 8004718 <_puts_r+0x78>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	da2e      	bge.n	800473e <_puts_r+0x9e>
 80046e0:	4622      	mov	r2, r4
 80046e2:	210a      	movs	r1, #10
 80046e4:	4628      	mov	r0, r5
 80046e6:	f000 f83f 	bl	8004768 <__swbuf_r>
 80046ea:	3001      	adds	r0, #1
 80046ec:	d011      	beq.n	8004712 <_puts_r+0x72>
 80046ee:	200a      	movs	r0, #10
 80046f0:	e011      	b.n	8004716 <_puts_r+0x76>
 80046f2:	4b17      	ldr	r3, [pc, #92]	; (8004750 <_puts_r+0xb0>)
 80046f4:	429c      	cmp	r4, r3
 80046f6:	d101      	bne.n	80046fc <_puts_r+0x5c>
 80046f8:	68ac      	ldr	r4, [r5, #8]
 80046fa:	e7e3      	b.n	80046c4 <_puts_r+0x24>
 80046fc:	4b15      	ldr	r3, [pc, #84]	; (8004754 <_puts_r+0xb4>)
 80046fe:	429c      	cmp	r4, r3
 8004700:	bf08      	it	eq
 8004702:	68ec      	ldreq	r4, [r5, #12]
 8004704:	e7de      	b.n	80046c4 <_puts_r+0x24>
 8004706:	4621      	mov	r1, r4
 8004708:	4628      	mov	r0, r5
 800470a:	f000 f87f 	bl	800480c <__swsetup_r>
 800470e:	2800      	cmp	r0, #0
 8004710:	d0dd      	beq.n	80046ce <_puts_r+0x2e>
 8004712:	f04f 30ff 	mov.w	r0, #4294967295
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	2b00      	cmp	r3, #0
 800471a:	da04      	bge.n	8004726 <_puts_r+0x86>
 800471c:	69a2      	ldr	r2, [r4, #24]
 800471e:	429a      	cmp	r2, r3
 8004720:	dc06      	bgt.n	8004730 <_puts_r+0x90>
 8004722:	290a      	cmp	r1, #10
 8004724:	d004      	beq.n	8004730 <_puts_r+0x90>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	6022      	str	r2, [r4, #0]
 800472c:	7019      	strb	r1, [r3, #0]
 800472e:	e7cf      	b.n	80046d0 <_puts_r+0x30>
 8004730:	4622      	mov	r2, r4
 8004732:	4628      	mov	r0, r5
 8004734:	f000 f818 	bl	8004768 <__swbuf_r>
 8004738:	3001      	adds	r0, #1
 800473a:	d1c9      	bne.n	80046d0 <_puts_r+0x30>
 800473c:	e7e9      	b.n	8004712 <_puts_r+0x72>
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	200a      	movs	r0, #10
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	6022      	str	r2, [r4, #0]
 8004746:	7018      	strb	r0, [r3, #0]
 8004748:	e7e5      	b.n	8004716 <_puts_r+0x76>
 800474a:	bf00      	nop
 800474c:	08005030 	.word	0x08005030
 8004750:	08005050 	.word	0x08005050
 8004754:	08005010 	.word	0x08005010

08004758 <puts>:
 8004758:	4b02      	ldr	r3, [pc, #8]	; (8004764 <puts+0xc>)
 800475a:	4601      	mov	r1, r0
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	f7ff bf9f 	b.w	80046a0 <_puts_r>
 8004762:	bf00      	nop
 8004764:	20000010 	.word	0x20000010

08004768 <__swbuf_r>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	460e      	mov	r6, r1
 800476c:	4614      	mov	r4, r2
 800476e:	4605      	mov	r5, r0
 8004770:	b118      	cbz	r0, 800477a <__swbuf_r+0x12>
 8004772:	6983      	ldr	r3, [r0, #24]
 8004774:	b90b      	cbnz	r3, 800477a <__swbuf_r+0x12>
 8004776:	f000 f9a7 	bl	8004ac8 <__sinit>
 800477a:	4b21      	ldr	r3, [pc, #132]	; (8004800 <__swbuf_r+0x98>)
 800477c:	429c      	cmp	r4, r3
 800477e:	d12a      	bne.n	80047d6 <__swbuf_r+0x6e>
 8004780:	686c      	ldr	r4, [r5, #4]
 8004782:	69a3      	ldr	r3, [r4, #24]
 8004784:	60a3      	str	r3, [r4, #8]
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	071a      	lsls	r2, r3, #28
 800478a:	d52e      	bpl.n	80047ea <__swbuf_r+0x82>
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	b363      	cbz	r3, 80047ea <__swbuf_r+0x82>
 8004790:	6923      	ldr	r3, [r4, #16]
 8004792:	6820      	ldr	r0, [r4, #0]
 8004794:	1ac0      	subs	r0, r0, r3
 8004796:	6963      	ldr	r3, [r4, #20]
 8004798:	b2f6      	uxtb	r6, r6
 800479a:	4283      	cmp	r3, r0
 800479c:	4637      	mov	r7, r6
 800479e:	dc04      	bgt.n	80047aa <__swbuf_r+0x42>
 80047a0:	4621      	mov	r1, r4
 80047a2:	4628      	mov	r0, r5
 80047a4:	f000 f926 	bl	80049f4 <_fflush_r>
 80047a8:	bb28      	cbnz	r0, 80047f6 <__swbuf_r+0x8e>
 80047aa:	68a3      	ldr	r3, [r4, #8]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	60a3      	str	r3, [r4, #8]
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	6022      	str	r2, [r4, #0]
 80047b6:	701e      	strb	r6, [r3, #0]
 80047b8:	6963      	ldr	r3, [r4, #20]
 80047ba:	3001      	adds	r0, #1
 80047bc:	4283      	cmp	r3, r0
 80047be:	d004      	beq.n	80047ca <__swbuf_r+0x62>
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	07db      	lsls	r3, r3, #31
 80047c4:	d519      	bpl.n	80047fa <__swbuf_r+0x92>
 80047c6:	2e0a      	cmp	r6, #10
 80047c8:	d117      	bne.n	80047fa <__swbuf_r+0x92>
 80047ca:	4621      	mov	r1, r4
 80047cc:	4628      	mov	r0, r5
 80047ce:	f000 f911 	bl	80049f4 <_fflush_r>
 80047d2:	b190      	cbz	r0, 80047fa <__swbuf_r+0x92>
 80047d4:	e00f      	b.n	80047f6 <__swbuf_r+0x8e>
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <__swbuf_r+0x9c>)
 80047d8:	429c      	cmp	r4, r3
 80047da:	d101      	bne.n	80047e0 <__swbuf_r+0x78>
 80047dc:	68ac      	ldr	r4, [r5, #8]
 80047de:	e7d0      	b.n	8004782 <__swbuf_r+0x1a>
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <__swbuf_r+0xa0>)
 80047e2:	429c      	cmp	r4, r3
 80047e4:	bf08      	it	eq
 80047e6:	68ec      	ldreq	r4, [r5, #12]
 80047e8:	e7cb      	b.n	8004782 <__swbuf_r+0x1a>
 80047ea:	4621      	mov	r1, r4
 80047ec:	4628      	mov	r0, r5
 80047ee:	f000 f80d 	bl	800480c <__swsetup_r>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d0cc      	beq.n	8004790 <__swbuf_r+0x28>
 80047f6:	f04f 37ff 	mov.w	r7, #4294967295
 80047fa:	4638      	mov	r0, r7
 80047fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047fe:	bf00      	nop
 8004800:	08005030 	.word	0x08005030
 8004804:	08005050 	.word	0x08005050
 8004808:	08005010 	.word	0x08005010

0800480c <__swsetup_r>:
 800480c:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <__swsetup_r+0xcc>)
 800480e:	b570      	push	{r4, r5, r6, lr}
 8004810:	681d      	ldr	r5, [r3, #0]
 8004812:	4606      	mov	r6, r0
 8004814:	460c      	mov	r4, r1
 8004816:	b125      	cbz	r5, 8004822 <__swsetup_r+0x16>
 8004818:	69ab      	ldr	r3, [r5, #24]
 800481a:	b913      	cbnz	r3, 8004822 <__swsetup_r+0x16>
 800481c:	4628      	mov	r0, r5
 800481e:	f000 f953 	bl	8004ac8 <__sinit>
 8004822:	4b2e      	ldr	r3, [pc, #184]	; (80048dc <__swsetup_r+0xd0>)
 8004824:	429c      	cmp	r4, r3
 8004826:	d10f      	bne.n	8004848 <__swsetup_r+0x3c>
 8004828:	686c      	ldr	r4, [r5, #4]
 800482a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800482e:	b29a      	uxth	r2, r3
 8004830:	0715      	lsls	r5, r2, #28
 8004832:	d42c      	bmi.n	800488e <__swsetup_r+0x82>
 8004834:	06d0      	lsls	r0, r2, #27
 8004836:	d411      	bmi.n	800485c <__swsetup_r+0x50>
 8004838:	2209      	movs	r2, #9
 800483a:	6032      	str	r2, [r6, #0]
 800483c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004840:	81a3      	strh	r3, [r4, #12]
 8004842:	f04f 30ff 	mov.w	r0, #4294967295
 8004846:	e03e      	b.n	80048c6 <__swsetup_r+0xba>
 8004848:	4b25      	ldr	r3, [pc, #148]	; (80048e0 <__swsetup_r+0xd4>)
 800484a:	429c      	cmp	r4, r3
 800484c:	d101      	bne.n	8004852 <__swsetup_r+0x46>
 800484e:	68ac      	ldr	r4, [r5, #8]
 8004850:	e7eb      	b.n	800482a <__swsetup_r+0x1e>
 8004852:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <__swsetup_r+0xd8>)
 8004854:	429c      	cmp	r4, r3
 8004856:	bf08      	it	eq
 8004858:	68ec      	ldreq	r4, [r5, #12]
 800485a:	e7e6      	b.n	800482a <__swsetup_r+0x1e>
 800485c:	0751      	lsls	r1, r2, #29
 800485e:	d512      	bpl.n	8004886 <__swsetup_r+0x7a>
 8004860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004862:	b141      	cbz	r1, 8004876 <__swsetup_r+0x6a>
 8004864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004868:	4299      	cmp	r1, r3
 800486a:	d002      	beq.n	8004872 <__swsetup_r+0x66>
 800486c:	4630      	mov	r0, r6
 800486e:	f000 fa19 	bl	8004ca4 <_free_r>
 8004872:	2300      	movs	r3, #0
 8004874:	6363      	str	r3, [r4, #52]	; 0x34
 8004876:	89a3      	ldrh	r3, [r4, #12]
 8004878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800487c:	81a3      	strh	r3, [r4, #12]
 800487e:	2300      	movs	r3, #0
 8004880:	6063      	str	r3, [r4, #4]
 8004882:	6923      	ldr	r3, [r4, #16]
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	f043 0308 	orr.w	r3, r3, #8
 800488c:	81a3      	strh	r3, [r4, #12]
 800488e:	6923      	ldr	r3, [r4, #16]
 8004890:	b94b      	cbnz	r3, 80048a6 <__swsetup_r+0x9a>
 8004892:	89a3      	ldrh	r3, [r4, #12]
 8004894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489c:	d003      	beq.n	80048a6 <__swsetup_r+0x9a>
 800489e:	4621      	mov	r1, r4
 80048a0:	4630      	mov	r0, r6
 80048a2:	f000 f9bf 	bl	8004c24 <__smakebuf_r>
 80048a6:	89a2      	ldrh	r2, [r4, #12]
 80048a8:	f012 0301 	ands.w	r3, r2, #1
 80048ac:	d00c      	beq.n	80048c8 <__swsetup_r+0xbc>
 80048ae:	2300      	movs	r3, #0
 80048b0:	60a3      	str	r3, [r4, #8]
 80048b2:	6963      	ldr	r3, [r4, #20]
 80048b4:	425b      	negs	r3, r3
 80048b6:	61a3      	str	r3, [r4, #24]
 80048b8:	6923      	ldr	r3, [r4, #16]
 80048ba:	b953      	cbnz	r3, 80048d2 <__swsetup_r+0xc6>
 80048bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80048c4:	d1ba      	bne.n	800483c <__swsetup_r+0x30>
 80048c6:	bd70      	pop	{r4, r5, r6, pc}
 80048c8:	0792      	lsls	r2, r2, #30
 80048ca:	bf58      	it	pl
 80048cc:	6963      	ldrpl	r3, [r4, #20]
 80048ce:	60a3      	str	r3, [r4, #8]
 80048d0:	e7f2      	b.n	80048b8 <__swsetup_r+0xac>
 80048d2:	2000      	movs	r0, #0
 80048d4:	e7f7      	b.n	80048c6 <__swsetup_r+0xba>
 80048d6:	bf00      	nop
 80048d8:	20000010 	.word	0x20000010
 80048dc:	08005030 	.word	0x08005030
 80048e0:	08005050 	.word	0x08005050
 80048e4:	08005010 	.word	0x08005010

080048e8 <__sflush_r>:
 80048e8:	898a      	ldrh	r2, [r1, #12]
 80048ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ee:	4605      	mov	r5, r0
 80048f0:	0710      	lsls	r0, r2, #28
 80048f2:	460c      	mov	r4, r1
 80048f4:	d458      	bmi.n	80049a8 <__sflush_r+0xc0>
 80048f6:	684b      	ldr	r3, [r1, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	dc05      	bgt.n	8004908 <__sflush_r+0x20>
 80048fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048fe:	2b00      	cmp	r3, #0
 8004900:	dc02      	bgt.n	8004908 <__sflush_r+0x20>
 8004902:	2000      	movs	r0, #0
 8004904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800490a:	2e00      	cmp	r6, #0
 800490c:	d0f9      	beq.n	8004902 <__sflush_r+0x1a>
 800490e:	2300      	movs	r3, #0
 8004910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004914:	682f      	ldr	r7, [r5, #0]
 8004916:	6a21      	ldr	r1, [r4, #32]
 8004918:	602b      	str	r3, [r5, #0]
 800491a:	d032      	beq.n	8004982 <__sflush_r+0x9a>
 800491c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800491e:	89a3      	ldrh	r3, [r4, #12]
 8004920:	075a      	lsls	r2, r3, #29
 8004922:	d505      	bpl.n	8004930 <__sflush_r+0x48>
 8004924:	6863      	ldr	r3, [r4, #4]
 8004926:	1ac0      	subs	r0, r0, r3
 8004928:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800492a:	b10b      	cbz	r3, 8004930 <__sflush_r+0x48>
 800492c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800492e:	1ac0      	subs	r0, r0, r3
 8004930:	2300      	movs	r3, #0
 8004932:	4602      	mov	r2, r0
 8004934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004936:	6a21      	ldr	r1, [r4, #32]
 8004938:	4628      	mov	r0, r5
 800493a:	47b0      	blx	r6
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	d106      	bne.n	8004950 <__sflush_r+0x68>
 8004942:	6829      	ldr	r1, [r5, #0]
 8004944:	291d      	cmp	r1, #29
 8004946:	d848      	bhi.n	80049da <__sflush_r+0xf2>
 8004948:	4a29      	ldr	r2, [pc, #164]	; (80049f0 <__sflush_r+0x108>)
 800494a:	40ca      	lsrs	r2, r1
 800494c:	07d6      	lsls	r6, r2, #31
 800494e:	d544      	bpl.n	80049da <__sflush_r+0xf2>
 8004950:	2200      	movs	r2, #0
 8004952:	6062      	str	r2, [r4, #4]
 8004954:	04d9      	lsls	r1, r3, #19
 8004956:	6922      	ldr	r2, [r4, #16]
 8004958:	6022      	str	r2, [r4, #0]
 800495a:	d504      	bpl.n	8004966 <__sflush_r+0x7e>
 800495c:	1c42      	adds	r2, r0, #1
 800495e:	d101      	bne.n	8004964 <__sflush_r+0x7c>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	b903      	cbnz	r3, 8004966 <__sflush_r+0x7e>
 8004964:	6560      	str	r0, [r4, #84]	; 0x54
 8004966:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004968:	602f      	str	r7, [r5, #0]
 800496a:	2900      	cmp	r1, #0
 800496c:	d0c9      	beq.n	8004902 <__sflush_r+0x1a>
 800496e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004972:	4299      	cmp	r1, r3
 8004974:	d002      	beq.n	800497c <__sflush_r+0x94>
 8004976:	4628      	mov	r0, r5
 8004978:	f000 f994 	bl	8004ca4 <_free_r>
 800497c:	2000      	movs	r0, #0
 800497e:	6360      	str	r0, [r4, #52]	; 0x34
 8004980:	e7c0      	b.n	8004904 <__sflush_r+0x1c>
 8004982:	2301      	movs	r3, #1
 8004984:	4628      	mov	r0, r5
 8004986:	47b0      	blx	r6
 8004988:	1c41      	adds	r1, r0, #1
 800498a:	d1c8      	bne.n	800491e <__sflush_r+0x36>
 800498c:	682b      	ldr	r3, [r5, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0c5      	beq.n	800491e <__sflush_r+0x36>
 8004992:	2b1d      	cmp	r3, #29
 8004994:	d001      	beq.n	800499a <__sflush_r+0xb2>
 8004996:	2b16      	cmp	r3, #22
 8004998:	d101      	bne.n	800499e <__sflush_r+0xb6>
 800499a:	602f      	str	r7, [r5, #0]
 800499c:	e7b1      	b.n	8004902 <__sflush_r+0x1a>
 800499e:	89a3      	ldrh	r3, [r4, #12]
 80049a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a4:	81a3      	strh	r3, [r4, #12]
 80049a6:	e7ad      	b.n	8004904 <__sflush_r+0x1c>
 80049a8:	690f      	ldr	r7, [r1, #16]
 80049aa:	2f00      	cmp	r7, #0
 80049ac:	d0a9      	beq.n	8004902 <__sflush_r+0x1a>
 80049ae:	0793      	lsls	r3, r2, #30
 80049b0:	680e      	ldr	r6, [r1, #0]
 80049b2:	bf08      	it	eq
 80049b4:	694b      	ldreq	r3, [r1, #20]
 80049b6:	600f      	str	r7, [r1, #0]
 80049b8:	bf18      	it	ne
 80049ba:	2300      	movne	r3, #0
 80049bc:	eba6 0807 	sub.w	r8, r6, r7
 80049c0:	608b      	str	r3, [r1, #8]
 80049c2:	f1b8 0f00 	cmp.w	r8, #0
 80049c6:	dd9c      	ble.n	8004902 <__sflush_r+0x1a>
 80049c8:	4643      	mov	r3, r8
 80049ca:	463a      	mov	r2, r7
 80049cc:	6a21      	ldr	r1, [r4, #32]
 80049ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b0      	blx	r6
 80049d4:	2800      	cmp	r0, #0
 80049d6:	dc06      	bgt.n	80049e6 <__sflush_r+0xfe>
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295
 80049e4:	e78e      	b.n	8004904 <__sflush_r+0x1c>
 80049e6:	4407      	add	r7, r0
 80049e8:	eba8 0800 	sub.w	r8, r8, r0
 80049ec:	e7e9      	b.n	80049c2 <__sflush_r+0xda>
 80049ee:	bf00      	nop
 80049f0:	20400001 	.word	0x20400001

080049f4 <_fflush_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	690b      	ldr	r3, [r1, #16]
 80049f8:	4605      	mov	r5, r0
 80049fa:	460c      	mov	r4, r1
 80049fc:	b1db      	cbz	r3, 8004a36 <_fflush_r+0x42>
 80049fe:	b118      	cbz	r0, 8004a08 <_fflush_r+0x14>
 8004a00:	6983      	ldr	r3, [r0, #24]
 8004a02:	b90b      	cbnz	r3, 8004a08 <_fflush_r+0x14>
 8004a04:	f000 f860 	bl	8004ac8 <__sinit>
 8004a08:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <_fflush_r+0x48>)
 8004a0a:	429c      	cmp	r4, r3
 8004a0c:	d109      	bne.n	8004a22 <_fflush_r+0x2e>
 8004a0e:	686c      	ldr	r4, [r5, #4]
 8004a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a14:	b17b      	cbz	r3, 8004a36 <_fflush_r+0x42>
 8004a16:	4621      	mov	r1, r4
 8004a18:	4628      	mov	r0, r5
 8004a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a1e:	f7ff bf63 	b.w	80048e8 <__sflush_r>
 8004a22:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <_fflush_r+0x4c>)
 8004a24:	429c      	cmp	r4, r3
 8004a26:	d101      	bne.n	8004a2c <_fflush_r+0x38>
 8004a28:	68ac      	ldr	r4, [r5, #8]
 8004a2a:	e7f1      	b.n	8004a10 <_fflush_r+0x1c>
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <_fflush_r+0x50>)
 8004a2e:	429c      	cmp	r4, r3
 8004a30:	bf08      	it	eq
 8004a32:	68ec      	ldreq	r4, [r5, #12]
 8004a34:	e7ec      	b.n	8004a10 <_fflush_r+0x1c>
 8004a36:	2000      	movs	r0, #0
 8004a38:	bd38      	pop	{r3, r4, r5, pc}
 8004a3a:	bf00      	nop
 8004a3c:	08005030 	.word	0x08005030
 8004a40:	08005050 	.word	0x08005050
 8004a44:	08005010 	.word	0x08005010

08004a48 <std>:
 8004a48:	2300      	movs	r3, #0
 8004a4a:	b510      	push	{r4, lr}
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a52:	6083      	str	r3, [r0, #8]
 8004a54:	8181      	strh	r1, [r0, #12]
 8004a56:	6643      	str	r3, [r0, #100]	; 0x64
 8004a58:	81c2      	strh	r2, [r0, #14]
 8004a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a5e:	6183      	str	r3, [r0, #24]
 8004a60:	4619      	mov	r1, r3
 8004a62:	2208      	movs	r2, #8
 8004a64:	305c      	adds	r0, #92	; 0x5c
 8004a66:	f7ff fe13 	bl	8004690 <memset>
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <std+0x38>)
 8004a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <std+0x3c>)
 8004a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <std+0x40>)
 8004a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a76:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <std+0x44>)
 8004a78:	6224      	str	r4, [r4, #32]
 8004a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8004a7c:	bd10      	pop	{r4, pc}
 8004a7e:	bf00      	nop
 8004a80:	08004e15 	.word	0x08004e15
 8004a84:	08004e37 	.word	0x08004e37
 8004a88:	08004e6f 	.word	0x08004e6f
 8004a8c:	08004e93 	.word	0x08004e93

08004a90 <_cleanup_r>:
 8004a90:	4901      	ldr	r1, [pc, #4]	; (8004a98 <_cleanup_r+0x8>)
 8004a92:	f000 b885 	b.w	8004ba0 <_fwalk_reent>
 8004a96:	bf00      	nop
 8004a98:	080049f5 	.word	0x080049f5

08004a9c <__sfmoreglue>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	1e4a      	subs	r2, r1, #1
 8004aa0:	2568      	movs	r5, #104	; 0x68
 8004aa2:	4355      	muls	r5, r2
 8004aa4:	460e      	mov	r6, r1
 8004aa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004aaa:	f000 f949 	bl	8004d40 <_malloc_r>
 8004aae:	4604      	mov	r4, r0
 8004ab0:	b140      	cbz	r0, 8004ac4 <__sfmoreglue+0x28>
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ab8:	300c      	adds	r0, #12
 8004aba:	60a0      	str	r0, [r4, #8]
 8004abc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ac0:	f7ff fde6 	bl	8004690 <memset>
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}

08004ac8 <__sinit>:
 8004ac8:	6983      	ldr	r3, [r0, #24]
 8004aca:	b510      	push	{r4, lr}
 8004acc:	4604      	mov	r4, r0
 8004ace:	bb33      	cbnz	r3, 8004b1e <__sinit+0x56>
 8004ad0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004ad4:	6503      	str	r3, [r0, #80]	; 0x50
 8004ad6:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <__sinit+0x58>)
 8004ad8:	4a12      	ldr	r2, [pc, #72]	; (8004b24 <__sinit+0x5c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6282      	str	r2, [r0, #40]	; 0x28
 8004ade:	4298      	cmp	r0, r3
 8004ae0:	bf04      	itt	eq
 8004ae2:	2301      	moveq	r3, #1
 8004ae4:	6183      	streq	r3, [r0, #24]
 8004ae6:	f000 f81f 	bl	8004b28 <__sfp>
 8004aea:	6060      	str	r0, [r4, #4]
 8004aec:	4620      	mov	r0, r4
 8004aee:	f000 f81b 	bl	8004b28 <__sfp>
 8004af2:	60a0      	str	r0, [r4, #8]
 8004af4:	4620      	mov	r0, r4
 8004af6:	f000 f817 	bl	8004b28 <__sfp>
 8004afa:	2200      	movs	r2, #0
 8004afc:	60e0      	str	r0, [r4, #12]
 8004afe:	2104      	movs	r1, #4
 8004b00:	6860      	ldr	r0, [r4, #4]
 8004b02:	f7ff ffa1 	bl	8004a48 <std>
 8004b06:	2201      	movs	r2, #1
 8004b08:	2109      	movs	r1, #9
 8004b0a:	68a0      	ldr	r0, [r4, #8]
 8004b0c:	f7ff ff9c 	bl	8004a48 <std>
 8004b10:	2202      	movs	r2, #2
 8004b12:	2112      	movs	r1, #18
 8004b14:	68e0      	ldr	r0, [r4, #12]
 8004b16:	f7ff ff97 	bl	8004a48 <std>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	61a3      	str	r3, [r4, #24]
 8004b1e:	bd10      	pop	{r4, pc}
 8004b20:	0800500c 	.word	0x0800500c
 8004b24:	08004a91 	.word	0x08004a91

08004b28 <__sfp>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <__sfp+0x70>)
 8004b2c:	681e      	ldr	r6, [r3, #0]
 8004b2e:	69b3      	ldr	r3, [r6, #24]
 8004b30:	4607      	mov	r7, r0
 8004b32:	b913      	cbnz	r3, 8004b3a <__sfp+0x12>
 8004b34:	4630      	mov	r0, r6
 8004b36:	f7ff ffc7 	bl	8004ac8 <__sinit>
 8004b3a:	3648      	adds	r6, #72	; 0x48
 8004b3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	d503      	bpl.n	8004b4c <__sfp+0x24>
 8004b44:	6833      	ldr	r3, [r6, #0]
 8004b46:	b133      	cbz	r3, 8004b56 <__sfp+0x2e>
 8004b48:	6836      	ldr	r6, [r6, #0]
 8004b4a:	e7f7      	b.n	8004b3c <__sfp+0x14>
 8004b4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b50:	b16d      	cbz	r5, 8004b6e <__sfp+0x46>
 8004b52:	3468      	adds	r4, #104	; 0x68
 8004b54:	e7f4      	b.n	8004b40 <__sfp+0x18>
 8004b56:	2104      	movs	r1, #4
 8004b58:	4638      	mov	r0, r7
 8004b5a:	f7ff ff9f 	bl	8004a9c <__sfmoreglue>
 8004b5e:	6030      	str	r0, [r6, #0]
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d1f1      	bne.n	8004b48 <__sfp+0x20>
 8004b64:	230c      	movs	r3, #12
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	4604      	mov	r4, r0
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <__sfp+0x74>)
 8004b70:	6665      	str	r5, [r4, #100]	; 0x64
 8004b72:	e9c4 5500 	strd	r5, r5, [r4]
 8004b76:	60a5      	str	r5, [r4, #8]
 8004b78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004b7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004b80:	2208      	movs	r2, #8
 8004b82:	4629      	mov	r1, r5
 8004b84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b88:	f7ff fd82 	bl	8004690 <memset>
 8004b8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b94:	e7e9      	b.n	8004b6a <__sfp+0x42>
 8004b96:	bf00      	nop
 8004b98:	0800500c 	.word	0x0800500c
 8004b9c:	ffff0001 	.word	0xffff0001

08004ba0 <_fwalk_reent>:
 8004ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ba4:	4680      	mov	r8, r0
 8004ba6:	4689      	mov	r9, r1
 8004ba8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bac:	2600      	movs	r6, #0
 8004bae:	b914      	cbnz	r4, 8004bb6 <_fwalk_reent+0x16>
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004bba:	3f01      	subs	r7, #1
 8004bbc:	d501      	bpl.n	8004bc2 <_fwalk_reent+0x22>
 8004bbe:	6824      	ldr	r4, [r4, #0]
 8004bc0:	e7f5      	b.n	8004bae <_fwalk_reent+0xe>
 8004bc2:	89ab      	ldrh	r3, [r5, #12]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d907      	bls.n	8004bd8 <_fwalk_reent+0x38>
 8004bc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	d003      	beq.n	8004bd8 <_fwalk_reent+0x38>
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	47c8      	blx	r9
 8004bd6:	4306      	orrs	r6, r0
 8004bd8:	3568      	adds	r5, #104	; 0x68
 8004bda:	e7ee      	b.n	8004bba <_fwalk_reent+0x1a>

08004bdc <__swhatbuf_r>:
 8004bdc:	b570      	push	{r4, r5, r6, lr}
 8004bde:	460e      	mov	r6, r1
 8004be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be4:	2900      	cmp	r1, #0
 8004be6:	b096      	sub	sp, #88	; 0x58
 8004be8:	4614      	mov	r4, r2
 8004bea:	461d      	mov	r5, r3
 8004bec:	da07      	bge.n	8004bfe <__swhatbuf_r+0x22>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	602b      	str	r3, [r5, #0]
 8004bf2:	89b3      	ldrh	r3, [r6, #12]
 8004bf4:	061a      	lsls	r2, r3, #24
 8004bf6:	d410      	bmi.n	8004c1a <__swhatbuf_r+0x3e>
 8004bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bfc:	e00e      	b.n	8004c1c <__swhatbuf_r+0x40>
 8004bfe:	466a      	mov	r2, sp
 8004c00:	f000 f96e 	bl	8004ee0 <_fstat_r>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	dbf2      	blt.n	8004bee <__swhatbuf_r+0x12>
 8004c08:	9a01      	ldr	r2, [sp, #4]
 8004c0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c12:	425a      	negs	r2, r3
 8004c14:	415a      	adcs	r2, r3
 8004c16:	602a      	str	r2, [r5, #0]
 8004c18:	e7ee      	b.n	8004bf8 <__swhatbuf_r+0x1c>
 8004c1a:	2340      	movs	r3, #64	; 0x40
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	6023      	str	r3, [r4, #0]
 8004c20:	b016      	add	sp, #88	; 0x58
 8004c22:	bd70      	pop	{r4, r5, r6, pc}

08004c24 <__smakebuf_r>:
 8004c24:	898b      	ldrh	r3, [r1, #12]
 8004c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c28:	079d      	lsls	r5, r3, #30
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	d507      	bpl.n	8004c40 <__smakebuf_r+0x1c>
 8004c30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	6123      	str	r3, [r4, #16]
 8004c38:	2301      	movs	r3, #1
 8004c3a:	6163      	str	r3, [r4, #20]
 8004c3c:	b002      	add	sp, #8
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}
 8004c40:	ab01      	add	r3, sp, #4
 8004c42:	466a      	mov	r2, sp
 8004c44:	f7ff ffca 	bl	8004bdc <__swhatbuf_r>
 8004c48:	9900      	ldr	r1, [sp, #0]
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f000 f877 	bl	8004d40 <_malloc_r>
 8004c52:	b948      	cbnz	r0, 8004c68 <__smakebuf_r+0x44>
 8004c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c58:	059a      	lsls	r2, r3, #22
 8004c5a:	d4ef      	bmi.n	8004c3c <__smakebuf_r+0x18>
 8004c5c:	f023 0303 	bic.w	r3, r3, #3
 8004c60:	f043 0302 	orr.w	r3, r3, #2
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	e7e3      	b.n	8004c30 <__smakebuf_r+0xc>
 8004c68:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <__smakebuf_r+0x7c>)
 8004c6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c6c:	89a3      	ldrh	r3, [r4, #12]
 8004c6e:	6020      	str	r0, [r4, #0]
 8004c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	9b00      	ldr	r3, [sp, #0]
 8004c78:	6163      	str	r3, [r4, #20]
 8004c7a:	9b01      	ldr	r3, [sp, #4]
 8004c7c:	6120      	str	r0, [r4, #16]
 8004c7e:	b15b      	cbz	r3, 8004c98 <__smakebuf_r+0x74>
 8004c80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c84:	4630      	mov	r0, r6
 8004c86:	f000 f93d 	bl	8004f04 <_isatty_r>
 8004c8a:	b128      	cbz	r0, 8004c98 <__smakebuf_r+0x74>
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	f023 0303 	bic.w	r3, r3, #3
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	81a3      	strh	r3, [r4, #12]
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	431d      	orrs	r5, r3
 8004c9c:	81a5      	strh	r5, [r4, #12]
 8004c9e:	e7cd      	b.n	8004c3c <__smakebuf_r+0x18>
 8004ca0:	08004a91 	.word	0x08004a91

08004ca4 <_free_r>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	d045      	beq.n	8004d38 <_free_r+0x94>
 8004cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cb0:	1f0c      	subs	r4, r1, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bfb8      	it	lt
 8004cb6:	18e4      	addlt	r4, r4, r3
 8004cb8:	f000 f946 	bl	8004f48 <__malloc_lock>
 8004cbc:	4a1f      	ldr	r2, [pc, #124]	; (8004d3c <_free_r+0x98>)
 8004cbe:	6813      	ldr	r3, [r2, #0]
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	b933      	cbnz	r3, 8004cd2 <_free_r+0x2e>
 8004cc4:	6063      	str	r3, [r4, #4]
 8004cc6:	6014      	str	r4, [r2, #0]
 8004cc8:	4628      	mov	r0, r5
 8004cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cce:	f000 b93c 	b.w	8004f4a <__malloc_unlock>
 8004cd2:	42a3      	cmp	r3, r4
 8004cd4:	d90c      	bls.n	8004cf0 <_free_r+0x4c>
 8004cd6:	6821      	ldr	r1, [r4, #0]
 8004cd8:	1862      	adds	r2, r4, r1
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	bf04      	itt	eq
 8004cde:	681a      	ldreq	r2, [r3, #0]
 8004ce0:	685b      	ldreq	r3, [r3, #4]
 8004ce2:	6063      	str	r3, [r4, #4]
 8004ce4:	bf04      	itt	eq
 8004ce6:	1852      	addeq	r2, r2, r1
 8004ce8:	6022      	streq	r2, [r4, #0]
 8004cea:	6004      	str	r4, [r0, #0]
 8004cec:	e7ec      	b.n	8004cc8 <_free_r+0x24>
 8004cee:	4613      	mov	r3, r2
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	b10a      	cbz	r2, 8004cf8 <_free_r+0x54>
 8004cf4:	42a2      	cmp	r2, r4
 8004cf6:	d9fa      	bls.n	8004cee <_free_r+0x4a>
 8004cf8:	6819      	ldr	r1, [r3, #0]
 8004cfa:	1858      	adds	r0, r3, r1
 8004cfc:	42a0      	cmp	r0, r4
 8004cfe:	d10b      	bne.n	8004d18 <_free_r+0x74>
 8004d00:	6820      	ldr	r0, [r4, #0]
 8004d02:	4401      	add	r1, r0
 8004d04:	1858      	adds	r0, r3, r1
 8004d06:	4282      	cmp	r2, r0
 8004d08:	6019      	str	r1, [r3, #0]
 8004d0a:	d1dd      	bne.n	8004cc8 <_free_r+0x24>
 8004d0c:	6810      	ldr	r0, [r2, #0]
 8004d0e:	6852      	ldr	r2, [r2, #4]
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	4401      	add	r1, r0
 8004d14:	6019      	str	r1, [r3, #0]
 8004d16:	e7d7      	b.n	8004cc8 <_free_r+0x24>
 8004d18:	d902      	bls.n	8004d20 <_free_r+0x7c>
 8004d1a:	230c      	movs	r3, #12
 8004d1c:	602b      	str	r3, [r5, #0]
 8004d1e:	e7d3      	b.n	8004cc8 <_free_r+0x24>
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	1821      	adds	r1, r4, r0
 8004d24:	428a      	cmp	r2, r1
 8004d26:	bf04      	itt	eq
 8004d28:	6811      	ldreq	r1, [r2, #0]
 8004d2a:	6852      	ldreq	r2, [r2, #4]
 8004d2c:	6062      	str	r2, [r4, #4]
 8004d2e:	bf04      	itt	eq
 8004d30:	1809      	addeq	r1, r1, r0
 8004d32:	6021      	streq	r1, [r4, #0]
 8004d34:	605c      	str	r4, [r3, #4]
 8004d36:	e7c7      	b.n	8004cc8 <_free_r+0x24>
 8004d38:	bd38      	pop	{r3, r4, r5, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200000bc 	.word	0x200000bc

08004d40 <_malloc_r>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	1ccd      	adds	r5, r1, #3
 8004d44:	f025 0503 	bic.w	r5, r5, #3
 8004d48:	3508      	adds	r5, #8
 8004d4a:	2d0c      	cmp	r5, #12
 8004d4c:	bf38      	it	cc
 8004d4e:	250c      	movcc	r5, #12
 8004d50:	2d00      	cmp	r5, #0
 8004d52:	4606      	mov	r6, r0
 8004d54:	db01      	blt.n	8004d5a <_malloc_r+0x1a>
 8004d56:	42a9      	cmp	r1, r5
 8004d58:	d903      	bls.n	8004d62 <_malloc_r+0x22>
 8004d5a:	230c      	movs	r3, #12
 8004d5c:	6033      	str	r3, [r6, #0]
 8004d5e:	2000      	movs	r0, #0
 8004d60:	bd70      	pop	{r4, r5, r6, pc}
 8004d62:	f000 f8f1 	bl	8004f48 <__malloc_lock>
 8004d66:	4a21      	ldr	r2, [pc, #132]	; (8004dec <_malloc_r+0xac>)
 8004d68:	6814      	ldr	r4, [r2, #0]
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	b991      	cbnz	r1, 8004d94 <_malloc_r+0x54>
 8004d6e:	4c20      	ldr	r4, [pc, #128]	; (8004df0 <_malloc_r+0xb0>)
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	b91b      	cbnz	r3, 8004d7c <_malloc_r+0x3c>
 8004d74:	4630      	mov	r0, r6
 8004d76:	f000 f83d 	bl	8004df4 <_sbrk_r>
 8004d7a:	6020      	str	r0, [r4, #0]
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	4630      	mov	r0, r6
 8004d80:	f000 f838 	bl	8004df4 <_sbrk_r>
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	d124      	bne.n	8004dd2 <_malloc_r+0x92>
 8004d88:	230c      	movs	r3, #12
 8004d8a:	6033      	str	r3, [r6, #0]
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	f000 f8dc 	bl	8004f4a <__malloc_unlock>
 8004d92:	e7e4      	b.n	8004d5e <_malloc_r+0x1e>
 8004d94:	680b      	ldr	r3, [r1, #0]
 8004d96:	1b5b      	subs	r3, r3, r5
 8004d98:	d418      	bmi.n	8004dcc <_malloc_r+0x8c>
 8004d9a:	2b0b      	cmp	r3, #11
 8004d9c:	d90f      	bls.n	8004dbe <_malloc_r+0x7e>
 8004d9e:	600b      	str	r3, [r1, #0]
 8004da0:	50cd      	str	r5, [r1, r3]
 8004da2:	18cc      	adds	r4, r1, r3
 8004da4:	4630      	mov	r0, r6
 8004da6:	f000 f8d0 	bl	8004f4a <__malloc_unlock>
 8004daa:	f104 000b 	add.w	r0, r4, #11
 8004dae:	1d23      	adds	r3, r4, #4
 8004db0:	f020 0007 	bic.w	r0, r0, #7
 8004db4:	1ac3      	subs	r3, r0, r3
 8004db6:	d0d3      	beq.n	8004d60 <_malloc_r+0x20>
 8004db8:	425a      	negs	r2, r3
 8004dba:	50e2      	str	r2, [r4, r3]
 8004dbc:	e7d0      	b.n	8004d60 <_malloc_r+0x20>
 8004dbe:	428c      	cmp	r4, r1
 8004dc0:	684b      	ldr	r3, [r1, #4]
 8004dc2:	bf16      	itet	ne
 8004dc4:	6063      	strne	r3, [r4, #4]
 8004dc6:	6013      	streq	r3, [r2, #0]
 8004dc8:	460c      	movne	r4, r1
 8004dca:	e7eb      	b.n	8004da4 <_malloc_r+0x64>
 8004dcc:	460c      	mov	r4, r1
 8004dce:	6849      	ldr	r1, [r1, #4]
 8004dd0:	e7cc      	b.n	8004d6c <_malloc_r+0x2c>
 8004dd2:	1cc4      	adds	r4, r0, #3
 8004dd4:	f024 0403 	bic.w	r4, r4, #3
 8004dd8:	42a0      	cmp	r0, r4
 8004dda:	d005      	beq.n	8004de8 <_malloc_r+0xa8>
 8004ddc:	1a21      	subs	r1, r4, r0
 8004dde:	4630      	mov	r0, r6
 8004de0:	f000 f808 	bl	8004df4 <_sbrk_r>
 8004de4:	3001      	adds	r0, #1
 8004de6:	d0cf      	beq.n	8004d88 <_malloc_r+0x48>
 8004de8:	6025      	str	r5, [r4, #0]
 8004dea:	e7db      	b.n	8004da4 <_malloc_r+0x64>
 8004dec:	200000bc 	.word	0x200000bc
 8004df0:	200000c0 	.word	0x200000c0

08004df4 <_sbrk_r>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	4c06      	ldr	r4, [pc, #24]	; (8004e10 <_sbrk_r+0x1c>)
 8004df8:	2300      	movs	r3, #0
 8004dfa:	4605      	mov	r5, r0
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	f7fc fc2e 	bl	8001660 <_sbrk>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d102      	bne.n	8004e0e <_sbrk_r+0x1a>
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	b103      	cbz	r3, 8004e0e <_sbrk_r+0x1a>
 8004e0c:	602b      	str	r3, [r5, #0]
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	200001e0 	.word	0x200001e0

08004e14 <__sread>:
 8004e14:	b510      	push	{r4, lr}
 8004e16:	460c      	mov	r4, r1
 8004e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e1c:	f000 f896 	bl	8004f4c <_read_r>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	bfab      	itete	ge
 8004e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e26:	89a3      	ldrhlt	r3, [r4, #12]
 8004e28:	181b      	addge	r3, r3, r0
 8004e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e2e:	bfac      	ite	ge
 8004e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e32:	81a3      	strhlt	r3, [r4, #12]
 8004e34:	bd10      	pop	{r4, pc}

08004e36 <__swrite>:
 8004e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3a:	461f      	mov	r7, r3
 8004e3c:	898b      	ldrh	r3, [r1, #12]
 8004e3e:	05db      	lsls	r3, r3, #23
 8004e40:	4605      	mov	r5, r0
 8004e42:	460c      	mov	r4, r1
 8004e44:	4616      	mov	r6, r2
 8004e46:	d505      	bpl.n	8004e54 <__swrite+0x1e>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e50:	f000 f868 	bl	8004f24 <_lseek_r>
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e5e:	81a3      	strh	r3, [r4, #12]
 8004e60:	4632      	mov	r2, r6
 8004e62:	463b      	mov	r3, r7
 8004e64:	4628      	mov	r0, r5
 8004e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6a:	f000 b817 	b.w	8004e9c <_write_r>

08004e6e <__sseek>:
 8004e6e:	b510      	push	{r4, lr}
 8004e70:	460c      	mov	r4, r1
 8004e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e76:	f000 f855 	bl	8004f24 <_lseek_r>
 8004e7a:	1c43      	adds	r3, r0, #1
 8004e7c:	89a3      	ldrh	r3, [r4, #12]
 8004e7e:	bf15      	itete	ne
 8004e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e8a:	81a3      	strheq	r3, [r4, #12]
 8004e8c:	bf18      	it	ne
 8004e8e:	81a3      	strhne	r3, [r4, #12]
 8004e90:	bd10      	pop	{r4, pc}

08004e92 <__sclose>:
 8004e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e96:	f000 b813 	b.w	8004ec0 <_close_r>
	...

08004e9c <_write_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4c07      	ldr	r4, [pc, #28]	; (8004ebc <_write_r+0x20>)
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	4608      	mov	r0, r1
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	6022      	str	r2, [r4, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f7fc fb88 	bl	80015c0 <_write>
 8004eb0:	1c43      	adds	r3, r0, #1
 8004eb2:	d102      	bne.n	8004eba <_write_r+0x1e>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	b103      	cbz	r3, 8004eba <_write_r+0x1e>
 8004eb8:	602b      	str	r3, [r5, #0]
 8004eba:	bd38      	pop	{r3, r4, r5, pc}
 8004ebc:	200001e0 	.word	0x200001e0

08004ec0 <_close_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4c06      	ldr	r4, [pc, #24]	; (8004edc <_close_r+0x1c>)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	4608      	mov	r0, r1
 8004eca:	6023      	str	r3, [r4, #0]
 8004ecc:	f7fc fb94 	bl	80015f8 <_close>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	d102      	bne.n	8004eda <_close_r+0x1a>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	b103      	cbz	r3, 8004eda <_close_r+0x1a>
 8004ed8:	602b      	str	r3, [r5, #0]
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	200001e0 	.word	0x200001e0

08004ee0 <_fstat_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4c07      	ldr	r4, [pc, #28]	; (8004f00 <_fstat_r+0x20>)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	4608      	mov	r0, r1
 8004eea:	4611      	mov	r1, r2
 8004eec:	6023      	str	r3, [r4, #0]
 8004eee:	f7fc fb8f 	bl	8001610 <_fstat>
 8004ef2:	1c43      	adds	r3, r0, #1
 8004ef4:	d102      	bne.n	8004efc <_fstat_r+0x1c>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	b103      	cbz	r3, 8004efc <_fstat_r+0x1c>
 8004efa:	602b      	str	r3, [r5, #0]
 8004efc:	bd38      	pop	{r3, r4, r5, pc}
 8004efe:	bf00      	nop
 8004f00:	200001e0 	.word	0x200001e0

08004f04 <_isatty_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	4c06      	ldr	r4, [pc, #24]	; (8004f20 <_isatty_r+0x1c>)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4605      	mov	r5, r0
 8004f0c:	4608      	mov	r0, r1
 8004f0e:	6023      	str	r3, [r4, #0]
 8004f10:	f7fc fb8e 	bl	8001630 <_isatty>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d102      	bne.n	8004f1e <_isatty_r+0x1a>
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	b103      	cbz	r3, 8004f1e <_isatty_r+0x1a>
 8004f1c:	602b      	str	r3, [r5, #0]
 8004f1e:	bd38      	pop	{r3, r4, r5, pc}
 8004f20:	200001e0 	.word	0x200001e0

08004f24 <_lseek_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	4c07      	ldr	r4, [pc, #28]	; (8004f44 <_lseek_r+0x20>)
 8004f28:	4605      	mov	r5, r0
 8004f2a:	4608      	mov	r0, r1
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	2200      	movs	r2, #0
 8004f30:	6022      	str	r2, [r4, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	f7fc fb87 	bl	8001646 <_lseek>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d102      	bne.n	8004f42 <_lseek_r+0x1e>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	b103      	cbz	r3, 8004f42 <_lseek_r+0x1e>
 8004f40:	602b      	str	r3, [r5, #0]
 8004f42:	bd38      	pop	{r3, r4, r5, pc}
 8004f44:	200001e0 	.word	0x200001e0

08004f48 <__malloc_lock>:
 8004f48:	4770      	bx	lr

08004f4a <__malloc_unlock>:
 8004f4a:	4770      	bx	lr

08004f4c <_read_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4c07      	ldr	r4, [pc, #28]	; (8004f6c <_read_r+0x20>)
 8004f50:	4605      	mov	r5, r0
 8004f52:	4608      	mov	r0, r1
 8004f54:	4611      	mov	r1, r2
 8004f56:	2200      	movs	r2, #0
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f7fc fb13 	bl	8001586 <_read>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	d102      	bne.n	8004f6a <_read_r+0x1e>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	b103      	cbz	r3, 8004f6a <_read_r+0x1e>
 8004f68:	602b      	str	r3, [r5, #0]
 8004f6a:	bd38      	pop	{r3, r4, r5, pc}
 8004f6c:	200001e0 	.word	0x200001e0

08004f70 <_init>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	bf00      	nop
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr

08004f7c <_fini>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr
